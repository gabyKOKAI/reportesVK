### Escribe archivos LOG
from ClasesGenericas import WriteLog, RWConfig, SendEmail
from PyPDF2 import PdfFileWriter, PdfFileReader
from reportlab.lib.pagesizes import letter, landscape
from reportlab.pdfgen import canvas
import warnings
import time
import os
import zipfile
import shutil

warnings.filterwarnings("ignore")

class ReportesPDFContravel:

    def __init__(self, sem, an, mes, diaI, diaF, nomArch, rutArch, repTyp):
        nameFunction = "setInfoParametros"

        try:
            ### Global Variables
            self.renglon = 600
            self.c = ""
            self.linePage = 1
            self.cliente = ""
            self.nomCliente = ""
            self.clienteAnterior = ""
            self.nomClienteAnterior = ""
            self.mensajesErr = {}

            ### Summary Variables
            self.comisionNeta = 1 * 0
            self.importeComisiones = 1 * 0
            self.totalTarifa = 1 * 0
            self.totalIVA = 1 * 0
            self.totalTUA = 1 * 0
            self.total = 1 * 0

            ### Configuration Variables
            self.semana = sem
            self.ano = an[2:]
            mesPeriodo = mes
            diaIniciaPeriodo = diaI
            diaFinPeriodo = diaF
            self.periodo = "Periodo del " + diaIniciaPeriodo + " de " + mesPeriodo + " 20" + self.ano + " al " + diaFinPeriodo + " de " + mesPeriodo + " 20" + self.ano
            self.directorio =rutArch
            self.reporteType = repTyp
            self.nombreArchivo = nomArch

            ##print("Gracias, estoy procesando tus reportes, se crearan en la carpeta:" + self.directorio + "ReportesS" + self.semana)
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

    def addMensaje(self, tipo, mensaje):
        nameFunction = "addMensaje"
        ##debug, info, success, warning, error
        try:
            tam = len(self.mensajesErr)
            self.mensajesErr[tam] = {}
            self.mensajesErr[tam]["mensaje"] = mensaje
            self.mensajesErr[tam]["tipo"] = tipo
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)
        return

    ###Creates Format at the top of the reporte before titles
    def createArribaTitReporte(self, nomClienteTit):
        nameFunction = "createArribaReporte"

        try:
            self.renglon = 600

            self.c.setLineWidth(.3)

            self.c.setFont('Courier-Bold', 16)
            self.c.line(8, 602, 786, 602)
            self.c.line(8, 6, 786, 6)
            self.c.line(8, 602, 8, 6)
            self.c.line(786, 602, 786, 6)

            self.c.line(6, 604, 788, 604)
            self.c.line(6, 4, 788, 4)
            self.c.line(6, 604, 6, 4)
            self.c.line(788, 604, 788, 4)

            self.c.line(4, 606, 790, 606)
            self.c.line(4, 2, 790, 2)
            self.c.line(4, 606, 4, 2)
            self.c.line(790, 606, 790, 2)

            self.c.setFont('Courier-Bold', 14)
            self.c.drawString(25, self.renglon, "")
            self.renglon = self.renglon - 12
            self.c.drawString(120, self.renglon, nomClienteTit.center(68))
            ##self.renglon = self.renglon - 14
            self.c.setFont('Courier-Oblique', 12)
            fecha = time.strftime("%d/%m/%Y")
            self.c.drawString(25, self.renglon, "%-*s%+*s" % (52, "CONTRAVEL", 52, fecha))
            self.renglon = self.renglon - 12

            ##self.c.setFont('Courier-Bold',12)
            ##self.c.drawString(25,renglon,"")
            self.renglon = self.renglon - 8
            self.c.setFont('Courier-Bold', 12)
            self.c.drawString(25, self.renglon, "%-*s%*s%+*s" % (14, "Reporte de " + self.reporteType[:-3],
                                                       68, self.periodo.center(60, ' '),
                                                       16, "PÃ¡gina: " + str(self.linePage)))
            self.c.line(10, self.renglon - 4, 784, self.renglon - 4)
            self.c.line(10, self.renglon - 8, 784, self.renglon - 8)
            self.renglon = self.renglon - 12

            self.c.drawString(25, self.renglon, "")
            self.renglon = self.renglon - 12
            self.c.setFont('Courier-Bold', 8.5)
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Creates Format at the top of the reporte before starting report
    def createAbajoTitReporte(self, renglonTab):
        nameFunction = "createAbajoReporte"

        try:
            self.c.drawString(10, self.renglon, renglonTab)
            self.c.setFont('Courier-Bold', 20)
            self.c.line(10, self.renglon - 4, 784, self.renglon - 4)

            self.c.setFont('Courier', 8.5)
            self.c.drawString(15, self.renglon, "")
            self.renglon = self.renglon - 12
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Create titles of reports
    def createTitle(self, nomClienteTit):
        nameFunction = "createTitle-" +  self.reporteType

        try:
            self.createArribaTitReporte(nomClienteTit)

            if self.reporteType == "VentasPdf":
                renglonTab = "%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s" % (
                5, "Serie".center(5),
                8, " Factura".center(8),
                12, "Fecha".center(12),
                31, "Nombre Pasajero".center(31),
                12, "No. Boleto".center(12),
                31, "Concepto / Ruta".center(31),
                    10, "Forma Pago".center(10),
                    12, "Tarifa".center(12),

                    9, "IVA".center(9),
                    9, "TUA".center(9),
                    10, "TOTAL".center(10)
                )
            elif self.reporteType == "ComisionesPdf":
                renglonTab = "%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s" % (
                5, "Serie".center(5),
                8, " Fact/NC".center(8),
                12, "Fecha".center(12),
                31, "Nombre Pasajero".center(31),
                12, "No. Boleto".center(12),
                31, "Concepto / Ruta".center(31),
                6, "Prov.".center(6),
                12, "Importe Com.".center(12),
                6, "% Com.".center(6),
                10, " Com. Neta".center(10),
                9, "IVA".center(9),
                10, "Com. Total".center(10)
                )
            self.createAbajoTitReporte(renglonTab)
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Add total to report
    def addToReportVentas(self):
        nameFunction = "addToReportVentas"
        try:
            fileName = "ReporteCXC" + self.semana + ".csv"
            dst = self.directorio + fileName

            if not os.path.exists(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))

                with open(dst, 'w') as csv_file:
                    csv_file.write("SEMANA" + ",")
                    csv_file.write("CLAVE CLIENTE" + ",")
                    ##csv_file.write("CLIENTE" + ",")
                    csv_file.write("TOTAL" + ",")
                    csv_file.write("\n")

            with open(dst, 'a') as csv_file:
                if(self.total!=0):
                    csv_file.write(self.semana + ",")
                    csv_file.write(self.clienteAnterior + ",")
                    ##csv_file.write(self.nomClienteAnterior + ",")
                    csv_file.write(str(self.total) + ",")
                    csv_file.write("\n")

        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Create sumary of reports Ventas
    def createSumaryVentas(self):
        nameFunction = "createSumaryVentas"

        try:
            ##152
            if(self.renglon < 132):
                self.renglon = 600
                self.c.showPage()
                self.linePage = self.linePage + 1
                self.createTitle(self.nomClienteAnterior)

            self.c.line(560,self.renglon-2,784,self.renglon-2)
            self.c.setFont('Courier',12)

            self.renglon = self.renglon - 12
            self.c.drawString(300,self.renglon, "%+*s%-*s"%(50,"Total Tarifa: ",50, str("$ {:,.2f}".format(self.totalTarifa)).rjust(15)[:15]))

            self.c.setFont('Courier-Bold',12)
            self.c.drawString(20,self.renglon, "----------------DATOS PARA PAGO----------------")

            self.c.setFillColorRGB(0,0,0)
            self.c.setFont('Courier',12)
            self.renglon = self.renglon - 12
            self.c.drawString(300,self.renglon, "%+*s%-*s"%(50,"Total IVA: ",50, str("$ {:,.2f}".format(self.totalIVA)).rjust(15)[:15]))
            self.c.drawString(20,self.renglon, "REFERENCIA BANCARIA: ")
            self.c.setFont('Courier-Bold',12)
            self.c.setFillColorRGB(0,0,255)
            self.c.drawString(170,self.renglon, self.clienteAnterior)
            self.c.setFillColorRGB(0,0,0)
            self.c.setFont('Courier',12)
            self.renglon = self.renglon - 12
            self.c.drawString(300,self.renglon, "%+*s%-*s"%(50,"Total TUA: ",50, str("$ {:,.2f}".format(self.totalTUA)).rjust(15)[:15]))
            self.c.drawString(20,self.renglon, "DEPOSITAR A: ")
            self.c.setFont('Courier-Bold',12)
            self.c.drawString(170,self.renglon, "CONSOTRAVEL S.A.P.I. DE C.V.")

            self.renglon = self.renglon - 12
            self.c.setFont('Courier',12)
            self.c.drawString(20,self.renglon, "CUENTA:  ")
            self.c.setFont('Courier-Bold',12)
            self.c.drawString(170,self.renglon, "BBVA BANCOMER 0167293348")

            self.renglon = self.renglon - 12
            self.c.setFont('Courier',12)
            self.c.drawString(20,self.renglon, "CLAVE INTERBANCARIA: ")
            self.c.setFont('Courier-Bold',12)
            self.c.drawString(170,self.renglon, "012180001672933483")
            self.c.line(20,self.renglon-2,360,self.renglon-2)
            ##self.c.line(660,self.renglon-4,785,self.renglon-4)
            self.c.setFont('Courier-Bold',20)
            self.renglon = self.renglon - 20

            ##self.c.drawString(0,self.renglon, "%+*s%-*s"%(46,"TOTAL A PAGAR:",54, str("$ {:,.2f}".format(self.total)).rjust(13)[:13]))
            self.c.drawString(0,self.renglon, "%+*s%-*s"%(46,"TOTAL A PAGAR:",54, "$ {:,.2f}".format(self.total)))
            ##30, 70 ARRIBA Y 190 CENTRO
            self.c.line(380,self.renglon-2,740,self.renglon-2)
            self.c.line(380,self.renglon-4,740,self.renglon-4)

            self.c.setFont('Courier-Bold',16)
            self.renglon = self.renglon - 26
            self.renglon = self.renglon - 26
            ##self.renglon = self.renglon - 26
            self.c.setFillColorRGB(255,0,0)
            self.c.drawString(75,self.renglon, str("Â¡Â¡Â¡NO OLVIDE CAPTURAR LA REFERENCIA BANCARIA!!! : " + self.clienteAnterior).center(70)[:70])
            self.renglon = self.renglon - 20
            self.c.drawString(30,self.renglon, "%*s"%(45,"Â¡Muchas Gracias!"))

            self.renglon = self.renglon - 12

            self.totalTarifa = self.totalTarifa*0
            self.totalIVA = self.totalIVA*0
            self.totalTUA = self.totalTUA*0
            self.total = self.total*0
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Create sumary of reports Comisiones
    def createSumaryComisiones(self):
        nameFunction = "createSumaryComisiones"

        try:
                    ##148 128
            if(self.renglon < 128):
                self.renglon = 600
                self.c.showPage()
                self.linePage = self.linePage + 1
                self.createTitle(self.nomClienteAnterior)

            self.c.line(460,self.renglon-2,784,self.renglon-2)
            self.c.setFont('Courier',12)

            self.renglon = self.renglon - 12
            self.c.drawString(300,self.renglon, "%+*s%-*s"%(50,"Importe Comisionable:  ",50, str("$ {:,.2f}".format(self.importeComisiones)).rjust(15)[:15]))
            self.c.setFont('Courier-Bold',12)
            self.c.drawString(20,self.renglon, "CONCEPTO EN FACTURA:  ")
            self.c.setFillColorRGB(0,0,255)
            self.c.drawString(170,self.renglon, "COMISIONES SEMANA " + self.semana )

            self.c.setFillColorRGB(0,0,0)
            self.c.setFont('Courier',12)
            self.renglon = self.renglon - 20
            self.c.drawString(300,self.renglon, "%+*s%-*s"%(50,"Comision Neta:  ",50, str("$ {:,.2f}".format(self.comisionNeta)).rjust(15)[:15]))

            self.renglon = self.renglon - 12
            totalIVA = self.comisionNeta*.16
            self.c.drawString(300,self.renglon, "%+*s%-*s"%(50,"Total IVA (16%):  ",50, str("$ {:,.2f}".format(totalIVA)).rjust(15)[:15]))
            self.c.line(660,self.renglon-2,785,self.renglon-2)
            self.c.line(660,self.renglon-4,785,self.renglon-4)

            self.renglon = self.renglon - 12
            self.c.setFont('Courier-Bold',20)
            self.renglon = self.renglon - 20
            total = self.comisionNeta*1.16
            self.c.drawString(55,self.renglon, "%+*s%-*s"%(50,"Comision Total: ",50, str("$ {:,.2f}".format(total)).rjust(10)[:10]))
            self.c.line(460,self.renglon-2,785,self.renglon-2)
            ##self.c.line(460,self.renglon-4,785,self.renglon-4)

            self.c.setFont('Courier-Bold',16)
            self.renglon = self.renglon - 26
            self.renglon = self.renglon - 26
            ##self.renglon = self.renglon - 26
            self.c.setFillColorRGB(255,0,0)
            self.c.drawString(30,self.renglon, "Â¡Â¡Â¡Favor de NO ELABORAR FACTURAS de comisiones los ÃLTIMOS 2 DIAS DEL MES!!!")
            self.renglon = self.renglon - 20
            self.c.drawString(30,self.renglon, "%*s"%(45,"Â¡Muchas Gracias!"))

            self.renglon = self.renglon - 12

            self.comisionNeta = self.comisionNeta*0
            self.importeComisiones = self.importeComisiones*0
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Create sumary of reports
    def createSumary(self):
        nameFunction = "createSumary-" + self.reporteType
        try:
            if self.reporteType == "VentasPdf":
                self.createSumaryVentas()

            elif self.reporteType == "ComisionesPdf":
                self.createSumaryComisiones()
        except Exception as err:
            WriteLog.writeLog(nameFunction, err)

        return

    ###Creates report for each agency
    def createReport(self, type):
        nameFunction = "createReport-" + self.reporteType

        try:
            res = 0
            numBoleto = "---"
            linea= "---"
            src = self.directorio + "/" + self.nombreArchivo

            if not ".csv" in src:
                self.addMensaje("error","Recuerda que debes guardarlo como archivo CSV.")
            else:

                try:
                    file1 = open(src, "r", encoding="utf8", errors='ignore')
                except Exception as err:
                    print("El archivo " + src + " no existe.")
                self.clienteAnterior = ""
                
                path = self.directorio + "ReportesS" + self.semana + self.ano + "//"
                ##print(path)
                if not os.path.exists(path):
                    os.mkdir(path)
                else:
                    shutil.rmtree(path)

                fileName = "ReporteCXC" + self.semana + ".csv"
                dst = self.directorio + fileName
                if os.path.exists(dst):
                    os.remove(dst)

                for line in file1:
                    ##GOP checar si en lugar de esto, mejor checamos mas campos para cada tipo antes de llegar aqui.
                    columna21 = False
                    if(self.reporteType == "ComisionesPdf" and type == "new"):
                        if(line.split(',')[21] != "N/A"):
                            columna21 = True
                    elif(self.reporteType == "VentasPdf" or (self.reporteType == "ComisionesPdf" and type == "old")):
                        columna21 = True

                    if (line[0:3] != ",,," and line.split(',')[0].strip()!="CLAVE CLIENTE" and columna21):
                        linea = line
                        if(type == "old"):
                            numBoleto = line.split(',')[7].center(12)[:12]
                        else:
                            numBoleto = line.split(',')[2].center(12)[:12]

                        self.cliente = line.split(',')[0].zfill(6)
                        self.nomCliente = line.split(',')[1][:60] + "-" + self.cliente

                        if (self.cliente not in self.clienteAnterior):
                            if (self.c != ""):
                                self.addToReportVentas()
                                self.createSumary()
                                self.c.save()
                                res = res + 1
                            ###GOP segun yo no hace falta
                            self.nomCliente = line.split(',')[1][:60] + "-" + self.cliente
                            ##dst = self.directorio + "ReportesS" + self.semana + "//" + self.reporteType[0] + self.cliente + self.semana + ano + ".pdf"
                            if not os.path.exists(path):
                                os.mkdir(path)
                            dst = self.directorio + "ReportesS" + self.semana + self.ano + "//" + self.reporteType[
                                0] + self.cliente + self.semana + self.ano + ".pdf"
                            self.c = canvas.Canvas(dst, pagesize=landscape(letter))
                            self.linePage = 1
                            self.createTitle(self.nomCliente)

                        ##print(self.reporteType)
                        if self.reporteType == "VentasPdf":
                            self.totalTarifa = self.totalTarifa + float(line.split(',')[9])
                            self.totalIVA = self.totalIVA + float(line.split(',')[10])
                            self.totalTUA = self.totalTUA + float(line.split(',')[11])
                            self.total = self.total + float(line.split(',')[12])

                            renglonTab = "%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s" % (
                                5, line.split(',')[2].center(5)[:5],
                                8, line.split(',')[3].center(8)[:8],
                                12, line.split(',')[4].center(12)[:12],
                                31, line.split(',')[5].ljust(31)[:31],
                                12, line.split(',')[6].center(12)[:12],
                                31, line.split(',')[7].ljust(31)[:31],
                                10, line.split(',')[8].center(10)[:10],
                                12, (str("{:.2f}".format(float(line.split(',')[9]))) + "  ").rjust(12)[:12],

                                9, (str("{:.2f}".format(float(line.split(',')[10]))) + "  ").rjust(9)[:9],
                                9, (str("{:.2f}".format(float(line.split(',')[11]))) + "  ").rjust(9)[:9],
                                10, str("{:.2f}".format(float(line.split(',')[12][:-1]))).rjust(10)[:10]

                            )
                        elif self.reporteType == "ComisionesPdf" and type == "old":
                            self.comisionNeta = self.comisionNeta + float(line.split(',')[11])
                            self.importeComisiones = self.importeComisiones + float(line.split(',')[9])

                            renglonTab = "%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s" % (
                                5, line.split(',')[2].center(5)[:5],
                                8, line.split(',')[3].center(8)[:8],
                                12, line.split(',')[4].center(12)[:12],
                                31, line.split(',')[5].ljust(31)[:31],
                                12, line.split(',')[7].center(12)[:12],
                                31, line.split(',')[8].ljust(31)[:31],
                                6, line.split(',')[6].center(6)[:6],
                                12, (str("{:.2f}".format(float(line.split(',')[9]))) + "  ").rjust(12)[:12],
                                6, (line.split(',')[10] + "  ").rjust(6)[:6],
                                10, (str("{:.2f}".format(float(line.split(',')[11]))) + "  ").rjust(10)[:10],
                                9, (str("{:.2f}".format(float(line.split(',')[12]))) + "  ").rjust(9)[:9],
                                10, str("{:.2f}".format(float(line.split(',')[13]))).rjust(9)[:9]
                            )
                        elif self.reporteType == "ComisionesPdf" and type == "new":
                            self.comisionNeta = self.comisionNeta + float(line.split(',')[21])
                            self.importeComisiones = self.importeComisiones + float(line.split(',')[17])

                            ##5, "Serie".center(5),
                            ##8, " Fact/NC".center(8),
                            ##12, "Fecha".center(12),
                            ##31, "Nombre Pasajero".center(31),
                            ##12, "No. Boleto".center(12),
                            ##31, "Concepto / Ruta".center(31),
                            ##6, "Prov.".center(6),
                            ##12, "Importe Com.".center(12),
                            ##6, "% Com.".center(6),
                            ##10, " Com. Neta".center(10),
                            ##9, "IVA".center(9),
                            ##10, "Com. Total".center(10)

                            renglonTab = "%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s" % (
                                5, line.split(',')[3].center(5)[:5],
                                8, line.split(',')[4].center(8)[:8],
                                12, line.split(',')[5].center(12)[:12],
                                31, line.split(',')[6].ljust(31)[:31],
                                12, line.split(',')[2].center(12)[:12],
                                31, line.split(',')[14].ljust(31)[:31],
                                6, line.split(',')[7].center(6)[:6],
                                12, (str("{:.2f}".format(float(line.split(',')[17]))) + "  ").rjust(12)[:12],
                                6, (line.split(',')[20] + "  ").rjust(6)[:6],
                                10, (str("{:.2f}".format(float(line.split(',')[21]))) + "  ").rjust(10)[:10],
                                9, (str("{:.2f}".format(float(line.split(',')[22]))) + "  ").rjust(9)[:9],
                                10, str("{:.2f}".format(float(line.split(',')[23]))).rjust(9)[:9]
                            )

                        self.c.drawString(10, self.renglon, renglonTab)
                        self.renglon = self.renglon - 12

                        if (self.renglon < 10):
                            self.c.showPage()
                            self.linePage = self.linePage + 1
                            self.createTitle(self.nomCliente)
                        ##print(numBoleto)
                        self.clienteAnterior = self.cliente
                        self.nomClienteAnterior = self.nomCliente

                self.createSumary()
                self.c.save()
                res = res + 1
        except Exception as err:
            ##print(numBoleto)
            self.addMensaje("error", "Verifica en el boleto:" + numBoleto + " y la linea: " + linea + " o en el siguiente.")
            self.addMensaje("info", "Recuerda que: Las cantidades deben tener formato General. El documento no deben tener titulos ni deben existir comas Â´,Â´ en el archivo CSV antes de guardarlo")
            self.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))

            WriteLog.writeLog(nameFunction, err)

        return res

    ###Create ZIP
    def createZip(self):
        nameFunction = "createZip"

        try:
            res = ""

            path = self.directorio + "ReportesS" + self.semana + self.ano
            if(os.path.isfile(path+".zip")):
                os.remove(path + ".zip")
            
            shutil.make_archive(path, 'zip', path + "//")
            res = "ReportesS" + self.semana +  self.ano +".zip"
        except Exception as err:
            WriteLog.writeLog(nameFunction, err )

        return res
