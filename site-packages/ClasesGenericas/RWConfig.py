from getpass import getpass
from xml.dom import minidom
from Crypto.Cipher import AES
from ClasesGenericas import WriteLog
import base64

###Global Variables
nameClass = "RWConfig-v1"
logFile = "C:\\LOG\\0LogKokai"
IV = "CREADO POR KOKAI"

###Configuration Variables
actualMode = "TEST"
nomCliente = "ClientePrueba"
nomArchivo = "C:\\LOG\\NOMARCHIVOCONF"
nomClass = "RWConfig"

###Set Configuration for class
def setConfigurationRWConfig(nomArchivoAux, nomClienteAux, nomClassAux):
	nameFunction = "setConfigurationRWConfig"
	
	global actualMode
	global nomArchivo
	global nomCliente 
	global nomClass

	try:
		##WriteLog.setConfigurationWriteLog(nomArchivo, nomCliente, nameClass)
		nomArchivo = nomArchivoAux
		nomCliente = nomClienteAux
		nomClass = nomClassAux
		actualMode = readData("actualMode")
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return

def actualizaVariable():
	nameFunction = "actualizaVariable"
	try:
		etiqueta = input("Que etiqueda quieres cambiar: ")      ### Email
		esPass = input("Escribe un 1 si es un password, si no cualquier otro numero: ")
		if(esPass == 1):
			if(changePass(etiqueta)):
				print("Password Actualizado!")
			else:
				print("El password NO se actualizo!")
		else:
			valor = input("Que valor debe llevar: ")        ### goop.19@hotmail.com
			if(updateData(etiqueta, valor)):
				print("Dato Actualizado!")
			else:
				print("El dato NO se actualizo!")
				
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return

def changePass(etiqueta):
	nameFunction = "changePass"
	try:
		passw = getpass("Password del correo: \n -->")
		passw1 = getpass("Confirmar Password del correo: \n -->")
		if(passw == passw1):
			if(updateData(etiqueta, encripta(passw))):
				print("Password Actualizado!")
		else:
			print("\n!!!Intentalo de nuevo: favor de escribir contrasenas identicas")
			changePass(etiqueta)
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return

###desencripta contrasena
def desencripta (contrasenaE):
	nameFunction = "desencripta"
	res = ""
	key = nomCliente+"1234567891011121"
	try:
		cipher1 = AES.new(key[:16], AES.MODE_CFB, IV)
		res1 =  cipher1.decrypt(base64.b64decode(contrasenaE))
		pos = str(res1).find("_")
		res = res1[:pos-2]
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return res

###encripta contrasena
def encripta (contrasenaD):
	nameFunction = "encripta"
	res = ""
	key = nomCliente+"1234567891011121"
	try:
		cipher = AES.new(key[:16], AES.MODE_CFB, IV)
		message = contrasenaD+"_1234567890123456789012345678901234567890"
		res =base64.b64encode(cipher.encrypt(message[:32]))
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return res.decode(encoding="utf-8", errors="strict")


def updateData(etiqueta, valor):
	nameFunction = "updateData"
	res = False
	try:
		res = False
		xmldoc = minidom.parse(nomArchivo)
		conflist = xmldoc.getElementsByTagName('Configurations')
		for conf in conflist :
			if(conf.attributes['nomCliente'].value == nomCliente and conf.attributes['nameClass'].value == nomClass):
				varlist = conf.getElementsByTagName(etiqueta)
				### Another way to set value -> emailVarlist[0].attributes[atributo].value = str(password)
				varlist[0].setAttribute("value",str(valor))

				f = open(nomArchivo, "w")
				f.write(xmldoc.toxml())
				f.close
				
				res = True
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return res

def readData(etiqueta):
	nameFunction = "readData"
	res = ""
	try:
		xmldoc = minidom.parse(nomArchivo)
		conflist = xmldoc.getElementsByTagName('Configurations')
		for conf in conflist :
			if(conf.attributes['nomCliente'].value == nomCliente and conf.attributes['nameClass'].value == nomClass):
				### For Client gets configuration variables
				varlist = conf.getElementsByTagName(etiqueta)
				res = varlist[0].attributes['value'].value
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return res

def readDictionary(etiqueta):
	nameFunction = "readDictionary"
	res = {}
	try:
		xmldoc = minidom.parse(nomArchivo)
		conflist = xmldoc.getElementsByTagName('Configurations')
		for conf in conflist :
			if(conf.attributes['nomCliente'].value == nomCliente and conf.attributes['nameClass'].value == nomClass):
				### For Client gets configuration variables
				varlist = conf.getElementsByTagName(etiqueta)
				for varValue in varlist:
					value = varValue.attributes['value'].value
					pos = value.find("-")
					res[value[0:pos]] = value[pos+1:]

	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return res

###Main
def main():
	nameFunction = "main"
	try:
	#if (True==True):
		###--------------
			###actualizaVariable()
			###changePass("password")
		###--------------
		###setConfigurationRWConfig("C:\\LOG\\NOMARCHIVOCONF", "GONPARD", "InventariosGonpard-v1")
		##print(readData("email"))
		print(readDictionary("CATEGORIA"))
		
	except Exception as err:
		WriteLog.writeLog(nameFunction, err)
	return

if __name__ == "__main__": main()
