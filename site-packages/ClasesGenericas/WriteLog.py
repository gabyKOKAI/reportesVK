from datetime import datetime, date
from os.path import isfile, isdir
from os import makedirs, remove
from ClasesGenericas import RWConfig

### Global Variables
nameClass = "writeLog-v1"
##kokaiLog = "C:\\LOG\\0LogKokai"
kokaiLog = "/root/LOG/LogKokai"
nomArchivoAux = "C:\\LOG\\NOMARCHIVOCONF"
nomClienteAux = "ClientePrueba"
nomClassAux = "writeLog"
##logPath = "C:\\LOG\\0LogKokai"
logPath = "/root/LOG/LogKokaiApp"
fileLogHistPath = ""
fileName = ""

###Set Configuration for class
def setConfigurationWriteLog(nomArchivo1, nomCliente1, nameClass1):
	nameFunction = "setConfigurationWriteLog"

	global nomArchivoAux
	global nomClienteAux 
	global nomClassAux
	global logPath
	global fileLogHistPath
	global fileName

	try:
		nomArchivoAux = nomArchivo1
		nomClienteAux = nomCliente1
		nomClassAux = nameClass1

		RWConfig.setConfigurationRWConfig(nomArchivoAux, nomClienteAux, nomClassAux)
		logPath = RWConfig.readData("logPath") + nomClassAux

		fileLogHistPath = logPath + "\\A-" + str(date.today().year) + "_M-" + str(date.today().month)
		fileName = "\\" + str(date.today().day) + "." + str(date.today().month) + "." + str(date.today().year) + ".log"

		if(isdir(fileLogHistPath) == False):
			makedirs(fileLogHistPath)
			
		if(isdir(logPath) == False):
			makedirs(logPath)			
		
	except Exception as err:
		writeLog(nameFunction, err)
	return

### Writes line to LOG
def writeLog(function, err):
	nameFunction = "writeLog"
	
	try:
		### Add information for LOG File
		msg = "[" + str(datetime.now().strftime("%d/%m/%y-%H:%M:%S")) + "]" + " " + nomClassAux + "||" + function + " >> " + str(err) + "\n"
		
		fileLog = open(logPath + "-" + str(date.today().month) + ".log", 'a+')
		fileLog.write(msg)
		fileLog.close()

		##fileLogKokai = open(kokaiLog + "-" + str(date.today().month) + ".log", 'a+')
		##fileLogKokai.write(msg)
		##fileLogKokai.close()
			
	except Exception as err:
		msg = "[" + str(datetime.now().strftime("%d/%m/%y-%H:%M:%S")) + "]" + " " + nomClassAux + "||" + function + " >> Exception LOG: " + str(err) + "\n"
		fileLogKokai = open(kokaiLog + "-" + str(date.today().month), 'a+')
		fileLogKokai.write(msg)
		fileLogKokai.close()

	return

### Writes line to LOG
def writeLogRename(accion, DeDonde, ADonde):
	nameFunction = "writeLogRename"
	try:
		### Add information for LOG File

		msg = "[" + str(datetime.now().strftime("%d/%m/%y-%H:%M:%S")) + "]" + " " + accion + "||" + DeDonde + " >> " + ADonde + "\n"

		fileLog = open(fileLogHistPath + fileName, 'a+')
		fileLog.write(msg)
		fileLog.close()
			
	except Exception as err:
		writeLog(nameFunction, err)
	return

### Write Star line to LOG
def writeStart():
	nameFunction = "writeStart"
	try:
		startTime = datetime.now()
		writeLog(nameFunction,"Start: " + str(startTime))
	except Exception as err:
		writeLog(nameFunction, err)
	return startTime

### Write End line to LOG
def writeEnd(startTime):
	nameFunction = "writeEnd"
	try:
		duration = (datetime.now()  - startTime).total_seconds()
		writeLog(nameFunction,"DONE: " + str(duration) + " sec o " + str(duration/60) + " min")
	except Exception as err:
		writeLog(nameFunction, err)
	return

### Write STAR or END or status line to LOG RENAME
def writeStatusRename(status):
	nameFunction = "writeStatusRename"
	try:
		writeLogRename("STATUS", "---------------------------", status)
	except Exception as err:
		writeLog(nameFunction, err)
	return

### Write anything to a file
def writeLogLibre(fileLibre, msg):
	nameFunction = "writeLogLibre"
	try:
		### Add information for LOG File
		fileLibre = "\\" + datetime.now().strftime("%d%b%y") + "-" + fileLibre

		fileLog = open(logPath + fileLibre, 'a+')
		fileLog.write(msg + "\n")
		fileLog.close()
			
	except Exception as err:
		writeLog(nameFunction, err)
	return

### Clean Logs from aplication from the number of months specified
def cleanLogs(numMonths):
	nameFunction = "cleanLogs"
	try:
		###--------------
			### Example to delete all logs from 3 months before today
			###for x in range(3, 12):
				###cleanLogs(logPath, x)
				###monthDelete = date.today().month-numMonths
		###--------------

		monthDelete = date.today().month-numMonths
		
		if(monthDelete<=0):
			monthDelete = monthDelete + 12

		### Remove App Log
		fileName = logPath + "-" + str(monthDelete) + ".log"
		if(isfile(fileName) ):
			remove(fileName)

		### Remove Kokai Log
		fileName = kokaiLog + "-" + str(monthDelete) + ".log" 
		if(isfile(fileName) ):
			remove(fileName)

	except Exception as err:
		writeLog(nameFunction, err)
	return 

###Main
def main():
	nameFunction = "main"
	try:
	#if (True==True):
		writeLog("prueba", "error")
		###--------------
			###writeLogRename("prueba", "prueba", "prueba", "C://log")
			###startTime = writeStart(kokaiLog, nameClass)
			###input("hola")
			###writeEnd(kokaiLog, nameClass, startTime)
			###cleanLogs("C:\\LOG\\InventariosGonpard-v1",1)
		###--------------
	       
	except Exception as err:
		writeLog(nameFunction, err)
	return

if __name__ == "__main__": main()
