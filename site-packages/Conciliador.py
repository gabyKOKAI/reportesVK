### Escribe archivos LOG
from ClasesGenericas import WriteLog, WriteErrors
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os
import time
import warnings

warnings.filterwarnings("ignore")

class Conciliador:

    def __init__(self, agnc, fch, rutaArch,subFldr):
        nameFunction = "setInfoParametros2"
        try:
            ### Global Variables
            self.wriErr = WriteErrors.WriteErrors()  ##.mensajesErr = {}
            # self.renglon = 780
            self.c = ""
            self.linePage = 1
            self.reporteType = "Conciliacion"
            self.icaavTodo = {}
            self.bancoTodo = {}
            self.cargAbonTodo = {}
            self.ventasIngresos = {}
            self.resTodo = {}
            self.totales = {}
            self.idMovRes = 1
            self.fecha = fch ##"31/07/2017" or ""
            self.titulosMedios = {"3": "CARGOS DEL BANCO NO CORRESPONDIDOS POR   NOSOTROS",
                                         "4": "ABONOS NUESTROS NO CORRESPONDIDOS POR EL BANCO",
                                         "1": "ABONOS DEL BANCO NO CORRESPONDIDOS POR   NOSOTROS",
                                         "2": "CARGOS NUESTROS NO CORRESPONDIDOS POR EL BANCO"}
            self.razonSocialAgencia = {"Contravel": "CONSOTRAVEL S.A.P.I. DE C.V. (CON0901295Q8)",
                                          "VK": "VIAJES KOKAI S.A DE C.V (VKO8602063H6)",
										  "Otra":""}

            ### Configuration Variables
            self.agencia = agnc ##"VK" or "Contravel"
            self.directorio = rutaArch ##"./Reportes" + self.agencia + "/"
            self.subFolder = subFldr
            ##print("Gracias, estoy procesando tus reportes, se crearan en la carpeta:" + self.directorio + "ReportesS" + self.semana)
        except Exception as err:
            self.wriErr.addMensaje("error",err)
            WriteLog.writeLog(nameFunction, err)

    ###Regresa Banco
    def regresaBanco(self, cuenta, idMov):
        nameFunction = "regresaBanco" + self.reporteType
        try:
            if "banco" in self.resTodo[cuenta][idMov]:
                banco = self.resTodo[cuenta][idMov]["banco"]
            else:
                banco = {}
                banco['fecha'] = ""
                banco['conceptoReferencia'] = ""
                banco['cargo'] = 0.0
                banco['abono'] = 0.0
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return banco

    ###Regresa ICAAV
    def regresaICAAV(self, cuenta, idMov):
        nameFunction = "regresaICAAV" + self.reporteType
        try:
            if "icaav" in self.resTodo[cuenta][idMov]:
                icaav = self.resTodo[cuenta][idMov]["icaav"]
            else:
                icaav = {}
                icaav['detallePolizaTipo'] = ""
                icaav['detallePolizaNumPoliza'] = ""
                icaav['detallePolizaReferencia'] = ""
                icaav['detallePolizaConceptoMov'] = ""
                icaav['cargo'] = 0.0
                icaav['abono'] = 0.0
                icaav['datosPolizaFecha'] = ""
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return icaav

    ###Crea titulos de reporte de conciliación
    def createTitlePDF(self, cuenta):
        nameFunction = "createTitlePDF" + self.reporteType

        try:
            self.renglon = 780

            self.c.setLineWidth(.3)

            self.c.setFont('Courier-Bold', 14)
            self.c.drawString(25,  self.renglon, "")
            self.renglon =  self.renglon - 12
            self.c.drawString(5,  self.renglon, ("Cuenta: " + cuenta).rjust(70))
            self.renglon =  self.renglon - 14
            fecha2 = time.strftime("%d/%m/%Y")
            self.c.drawString(5,  self.renglon, "%-*s%+*s" % (27, self.razonSocialAgencia[self.agencia].ljust(43), 27, fecha2))
            self.renglon =  self.renglon - 12

            self.c.setFont('Courier-Bold', 10)
            self.c.drawString(25,  self.renglon, "")

            self.renglon =  self.renglon - 10
            if(cuenta in self.saldosTodo):
                segunIcaav = self.saldosTodo[cuenta]["ICAAV"]
                segunBanco = self.saldosTodo[cuenta]["BANCOS"]
            else:
                segunIcaav = -1
                segunBanco = -1
            self.c.drawString(5,  self.renglon, "SF ICAAV: ".rjust(41))
            self.c.drawString(250,  self.renglon, ("${:,.2f}".format(segunIcaav)).ljust(41))

            self.renglon =  self.renglon - 10
            self.c.drawString(5,  self.renglon, "SALDO SEGÚN ESTADO DE CUENTA DEL BANCO: ".rjust(41))
            self.c.drawString(250,  self.renglon, ("${:,.2f}".format(segunBanco)).ljust(41))

            self.renglon =  self.renglon - 10
            self.c.drawString(5,  self.renglon, ("SALDO SEGÚN AUXILIARES AL " + self.fecha + ": ").rjust(41))
            segunAuxiliar = segunBanco + self.totales["3"] + self.totales["2"] - self.totales["4"] - self.totales["1"]
            self.c.drawString(250,  self.renglon, ("${:,.2f}".format(segunAuxiliar)).ljust(41))
            self.renglon =  self.renglon - 10

            self.c.drawString(5,  self.renglon, ("DIFERENCIA: ").rjust(41))
            self.c.drawString(250,  self.renglon, ("${:,.2f}".format(segunAuxiliar - segunIcaav)).ljust(41))

            self.c.line(5,  self.renglon - 4, 605,  self.renglon - 4)
            self.c.line(5,  self.renglon - 8, 605,  self.renglon - 8)
            self.renglon =  self.renglon - 12

            self.c.drawString(25,  self.renglon, "")
            self.renglon =  self.renglon - 12
            self.c.setFont('Courier-Bold', 8.5)
            renglonTab = "%*s%*s%*s%*s" % (
            20, "Fecha".center(20)[:20],
            51, "Concepto / Referencia".center(51)[:51],
            15, "Cargo / Abono".center(15)[:15],
            18, " -----TOTALES-----".center(18)[:18]
            )

            self.c.drawString(10,  self.renglon, renglonTab)
            self.c.setFont('Courier-Bold', 20)
            self.c.line(5,  self.renglon - 4, 605,  self.renglon - 4)

            self.c.setFont('Courier', 8.5)
            self.c.drawString(15,  self.renglon, "")
            self.renglon =  self.renglon - 12

        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return


    ###Crea reporte de conciliación
    def createReportPDF(self,cuenta):
        nameFunction = "createReportPDF" + self.reporteType

        try:
            dst = self.directorio + self.subFolder + self.fecha[8:] + "/" + self.agencia + "/" + cuenta + "_al" + self.fecha[
                                                             8:] + self.fecha[
                                                                5:7] + self.fecha[
                                                                   2:4] + ".pdf"

            if not os.path.exists(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))

            self.c = canvas.Canvas(dst, pagesize=letter)
            self.linePage = 1
            self.createTitlePDF(cuenta)
            lastStatus = "0"
            for idMov in sorted(self.resTodo[cuenta].keys()):
                status = self.resTodo[cuenta][idMov]["status"]
                banco = self.regresaBanco(cuenta, idMov)
                icaav = self.regresaICAAV(cuenta, idMov)

                if (status[0] != "5" and status[0] != "6"):

                    if (status != lastStatus and lastStatus != "0" and int(lastStatus[0]) < 5):
                        ## self.renglon =  self.renglon - 12
                        renglonTab = "%*s%*s" % (
                            86, "",
                            18, ("$" + str(format( self.totales[lastStatus[0]], ',.2f'))).rjust(18)[:18],
                            ##"${:,.2f}".format(totalTarifa)
                        )
                        print(renglonTab)
                        self.c.drawString(10,  self.renglon, renglonTab)
                        self.renglon =  self.renglon - 12

                    if (int(status[0]) < 5):
                        if (status != lastStatus):
                            ##print(cuenta)
                            ##print(status)
                            ##print(lastStatus)
                            for i in range(int(lastStatus[0]) + 1, int(status[0]) + 1):
                                ##print(i)
                                self.renglon =  self.renglon - 12
                                self.c.setFont('Courier-Bold', 8.5)
                                self.c.drawString(10,  self.renglon, self.titulosMedios[str(i)])
                                self.c.setFont('Courier', 8.5)
                                self.renglon =  self.renglon - 12
                                self.renglon =  self.renglon - 12

                    renglonTab = ""
                    if (status[0] == "1"):
                        renglonTab = "%*s%*s%*s" % (
                        20, banco["fecha"].center(20)[:20],
                        51, banco["conceptoReferencia"].ljust(51)[:51],
                        15, str("${:,.2f}".format(banco["abono"])).rjust(15)[:15]
                        )
                    if (status[0] == "2"):
                        renglonTab = "%*s%*s%*s" % (
                        20, icaav["datosPolizaFecha"].center(20)[:20],
                        51, (icaav["detallePolizaTipo"] + "-" + icaav["detallePolizaNumPoliza"]).ljust(51)[:51],
                        15, str("${:,.2f}".format(icaav["cargo"])).rjust(15)[:15]
                        )

                    if (status[0] == "3"):
                        renglonTab = "%*s%*s%*s" % (
                        20, banco["fecha"].center(20)[:20],
                        51, banco["conceptoReferencia"].ljust(51)[:51],
                        15, str("${:,.2f}".format(banco["cargo"])).rjust(15)[:15]
                        )
                    if (status[0] == "4"):
                        renglonTab = "%*s%*s%*s" % (
                        20, icaav["datosPolizaFecha"].center(20)[:20],
                        51, (icaav["detallePolizaTipo"] + "-" + icaav["detallePolizaNumPoliza"]).ljust(51)[:51],
                        15, str("${:,.2f}".format(icaav["abono"])).rjust(15)[:15]
                        )

                    print(renglonTab)
                    self.c.drawString(10,  self.renglon, renglonTab)
                    self.renglon =  self.renglon - 12

                    if ( self.renglon < 10):
                        self.c.showPage()
                        self.linePage = self.linePage + 1
                        self.createTitlePDF(cuenta)

                    ##if(status != lastStatus and lastStatus != ""):
                    ##createSumaryMedio()

                    lastStatus = status

            if (lastStatus != "0" and int(lastStatus[0]) < 5):
                ## self.renglon =  self.renglon - 12
                renglonTab = "%*s%*s" % (
                    86, "",
                    18, ("$" + str(format( self.totales[lastStatus[0]], ',.2f'))).rjust(18)[:18],
                    ##"${:,.2f}".format(totalTarifa)
                )
                self.c.drawString(10,  self.renglon, renglonTab)
                self.renglon =  self.renglon - 12

            # print(lastStatus)
            if (int(lastStatus[0]) < 5):
                # print(cuenta)
                # print(status)
                # print(lastStatus)
                for i in range(int(lastStatus[0]) + 1, 5):
                    # print(i)
                    self.renglon =  self.renglon - 12
                    self.c.setFont('Courier-Bold', 8.5)
                    self.c.drawString(10,  self.renglon, self.titulosMedios[str(i)])
                    self.c.setFont('Courier', 8.5)
                    self.renglon =  self.renglon - 12
                    self.renglon =  self.renglon - 12

            ##createSumaryPDF()
            self.c.save()

        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Recorre Resultado Corto Ventas Ingresos
    def recorreResCortoVentasIngresos():
        nameFunction = "recorreResCortoVentasIngresos" + self.reporteType

        try:

            dst = "Reportes" + self.agencia + "/VentasIngresos/VIRes" + ".csv"

            if not os.path.exists(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))
            with open(dst, 'w') as csv_file:
                ### Titulos CSV

                csv_file.write("Orden" + ",")
                csv_file.write("Cuenta_Reporte" + ",")
                csv_file.write("Mes" + ",")
                csv_file.write("Fecha_PI" + ",")
                csv_file.write("Poliza_PI" + ",")
                ##csv_file.write("numPolizaPI" + ",")
                csv_file.write("Cuenta_PI" + ",")
                csv_file.write("Ingreso" + ",")
                csv_file.write("Egreso" + ",")
                csv_file.write("Factura" + ",")
                ##csv_file.write("idFact" + ",")
                ##csv_file.write("numFact" + ",")


                ##csv_file.write("idCliente" + ",")
                csv_file.write("Num.Boleto/Detalle" + ",")
                csv_file.write("Concepto" + ",")
                csv_file.write("Tarifa_Base" + ",")
                ##csv_file.write("iva" + ",")
                ##csv_file.write("tua" + ",")
                csv_file.write("Impuestos" + ",")
                ##csv_file.write("total" + ",")
                ##csv_file.write("fechaFactura" + ",")

                csv_file.write("Cuenta" + ",")
                csv_file.write("Poliza" + ",")
                ##csv_file.write("numPoliza" + ",")
                csv_file.write("Fecha_Poliza" + ",")
                csv_file.write("%_Comision" + ",")
                ##csv_file.write("cargo" + ",")
                csv_file.write("Comision" + ",")
                csv_file.write("IVA_Comision"+",")
                ##csv_file.write("Cuenta_Pago" + ",")
                ##csv_file.write("Monto_Pago" + ",")
                ##csv_file.write("iva pago"+",")

                csv_file.write("\n")

                for clave1 in sorted(self.ventasIngresos.keys()):
                    for tam in self.ventasIngresos[clave1]:
                        org = True
                        dicIng = self.ventasIngresos[clave1][tam]

                        if("fechaPI" not in dicIng and tam > 1):
                             dicIng = self.ventasIngresos[clave1][1]
                             org = False

                        if("fechaPI" in dicIng):
                            csv_file.write(str(dicIng["idMov"]) + ",")
                            csv_file.write(str(dicIng["cuentaReporte"]) + ",")
                            csv_file.write(str(dicIng["mes"]) + ",")

                            csv_file.write(dicIng["fechaPI"] + ",")
                            csv_file.write(dicIng["polizaPI"] + dicIng["numPolizaPI"] + ",")
                            ##csv_file.write(dicIng["numPolizaPI"] + ",")
                            csv_file.write(dicIng["cuentaPI"] + ",")
                            if(org):
                                csv_file.write(str(dicIng["ingreso"]) + ",")
                                csv_file.write(str(dicIng["egreso"]) + ",")
                            else:
                                csv_file.write(",,")
                        else:
                            ##csv_file.write(",,,,,,")
                            csv_file.write(",,,,,,,,")

                        clave2 = clave1.split("-25-")[0] + clave1.split("-25-")[1]

                        csv_file.write( clave2 + ",")
                        ##csv_file.write(clave1.split("-25-")[0] + ",")
                        ##csv_file.write(clave1.split("-25-")[1] + ",")

                        dicIng = self.ventasIngresos[clave1][tam]

                        if("idCliente" in dicIng):
                            ##csv_file.write(dicIng["idCliente"] + ",")
                            csv_file.write(dicIng["detalleNumBol"] + ",")
                            csv_file.write(dicIng["detalleConcepto"] + ",")
                            csv_file.write(str(dicIng["base"]) + ",")
                            csv_file.write(str(dicIng["iva"]+dicIng["tua"]) + ",")
                            ##csv_file.write(str(dicIng["tua"]) + ",")
                            ##csv_file.write(str(dicIng["total"]) + ",")
                            ##csv_file.write(dicIng["fechaFactura"] + ",")
                        else:
                            ##csv_file.write(",,,,,,,,")
                            if(clave2 != "DEP"):
                                csv_file.write(",,,,")
                            else:
                                csv_file.write("---,---,---,---,")

                        if("cuenta" in dicIng):
                            csv_file.write(dicIng["cuenta"] + ",")
                            csv_file.write(dicIng["poliza"] + dicIng["numPoliza"] + ",")
                            ##csv_file.write(dicIng["numPoliza"] + ",")
                            csv_file.write(dicIng["datosPolizaFecha"] + ",")
                            ##csv_file.write(str(dicIng["cargo"]) + ",")
                            if("base" in dicIng and "abono" in dicIng):
                                if(dicIng["cuenta"][0:2]=="21"):
                                    csv_file.write("" + ",")
                                    ##csv_file.write(str(100*(dicIng["abono"])/(dicIng["base"]+dicIng["iva"]+dicIng["tua"])) + "%,")
                                elif(dicIng["base"] != 0):
                                    csv_file.write(str(100*dicIng["abono"]/dicIng["base"]) + "%,")
                                else:
                                    csv_file.write("N/A,")

                                ##csv_file.write(str(((dicIng["base"]-dicIng["abono"])*.16)+dicIng["tua"]) + ",")
                            else:
                                ##csv_file.write(",,")
                                csv_file.write(",")

                            csv_file.write(str(dicIng["abono"]) + ",")

                            if(dicIng["cuenta"][0:2]!="21"):
                                csv_file.write(str(dicIng["abono"]*.16) + ",")
                            else:
                                csv_file.write( "" + ",")

                            """if("total" in dicIng and (dicIng["total"]-dicIng["abono"]*1.16)>1):
                            ##input(str(dicIng["total"]-dicIng["abono"]))
                            ##if("fechaPI" in dicIng):
                                ##print(dicIng["total"])
                                ##input(dicIng["abono"])
                            if(clave1.split("-25-")[0]=="DBE"):
                                csv_file.write("2101003000" + ",")
                            elif(clave1.split("-25-")[0]=="DNE"):
                                csv_file.write("2101015000" + ",")
                            elif(clave1.split("-25-")[0]=="DVE"):
                                csv_file.write("2101019000" + ",")
                            elif(clave1.split("-25-")[0]=="DSE"):
                                csv_file.write("2101001000" + ",")
                            else:
                                csv_file.write("cxp mom" + ",")
                            csv_file.write(str(dicIng["total"]-dicIng["abono"]*1.16) + ",")
                            else:
                            csv_file.write("" + ",")
                            csv_file.write("" + ",")
                            """
                        else:
                            ##csv_file.write(",,,,,,,,,,,")
                            if(clave2 != "DEP"):
                                csv_file.write(",,,,,,")
                            else:
                                csv_file.write("---,---,---,---,---,---,")

                        csv_file.write("\n")

        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Recorre Resultado Corto Ventas Ingresos
    def recorreResMontoClave(self):
        nameFunction = "recorreResMontoClave" + self.reporteType

        try:

            dst = self.directorio + self.subFolder + "/" + self.agencia +"MCRes" + ".csv"

            if not os.path.exists(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))
            with open(dst, 'w') as csv_file:
                ### Titulos CSV

                csv_file.write("Clave" + ",")
                csv_file.write("Monto" + ",")
                csv_file.write("Monto2" + ",")
                csv_file.write("Estatus" + ",")
                csv_file.write("FechaComp" + ",")
                csv_file.write("OtroComp" + ",")
                csv_file.write("Base1" + ",")
                csv_file.write("Base2" + ",")
                csv_file.write("Base3" + ",")
                csv_file.write("Base4" + ",")
                csv_file.write("Base5" + ",")
                csv_file.write("Base6" + ",")
                csv_file.write("Base7" + ",")
                csv_file.write("Base8" + ",")
                csv_file.write("Base9" + ",")
                csv_file.write("Base10" + ",")
                csv_file.write("Base11" + ",")
                csv_file.write("Base12" + ",")
                csv_file.write("Base13" + ",")
                csv_file.write("Base14" + ",")
                csv_file.write("Base15" + ",")
                csv_file.write("Otro1" + ",")
                csv_file.write("Otro2" + ",")
                csv_file.write("Otro3" + ",")
                csv_file.write("Otro4" + ",")
                csv_file.write("Otro5" + ",")
                csv_file.write("Otro6" + ",")
                csv_file.write("Otro7" + ",")
                csv_file.write("Otro8" + ",")
                csv_file.write("Otro9" + ",")
                csv_file.write("Otro10" + ",")
                csv_file.write("Otro11" + ",")
                csv_file.write("Otro12" + ",")
                csv_file.write("Otro13" + ",")
                csv_file.write("Otro14" + ",")
                csv_file.write("Otro15" + ",")

                csv_file.write("\n")

                for clave1 in sorted(self.baseTodo.keys()):
                    for tam in self.baseTodo[clave1]:
                        #org = True
                        status =  ""
                        dicIng = self.baseTodo[clave1][tam]

                        csv_file.write(clave1 + ",")

                        #if("datoAux1" not in dicIng and tam > 1):
                             #dicIng = self.baseTodo[clave1][1]
                             #org = False

                        if(dicIng["dato1"]== "-"):
                            status = "NO ESTA EN BASE"
                            csv_file.write(",")
                        else:
                            csv_file.write(str(dicIng["monto"]) + ",")

                        if(dicIng["datoAux1"]== "-"):
                            status = status + "NO ESTA EN OTRO"
                            csv_file.write(",")
                        else:
                            try:
                                csv_file.write(str(dicIng["montoAux"]))
                            except Exception as err:
                                csv_file.write("--e--")
                                csv_file.write(str(dicIng))
                            csv_file.write(",")
                            #csv_file.write(str(dicIng))
                            #csv_file.write("montoAux" + ",")


                        if(status == "" and abs(dicIng["monto"] - dicIng["montoAux"])<1):
                            status = "OK"
                        elif (status == ""):
                            status = "diferentes"

                        csv_file.write(status+ ",")

                        if (dicIng["fecha"] == "" and dicIng["fechaAux"] == ""):
                            csv_file.write("" + ",")
                        elif(str(dicIng["fecha"]) == str(dicIng["fechaAux"])):
                            csv_file.write("iguales" + ",")
                        else:
                            csv_file.write("diferentes" + ",")

                        if (dicIng["otro"] == "" and dicIng["otroAux"] == ""):
                            csv_file.write("" + ",")
                        elif (dicIng["otro"] == dicIng["otroAux"]):
                            csv_file.write("iguales" + ",")
                        else:
                            csv_file.write("diferentes" + ",")

                        #dicIng = self.baseTodo[clave1][tam]
                        if("dato1" in dicIng):
                            ##csv_file.write(dicIng["idCliente"] + ",")
                            csv_file.write(dicIng["dato1"] + ",")
                            csv_file.write(dicIng["dato2"] + ",")
                            csv_file.write(dicIng["dato3"] + ",")
                            csv_file.write(dicIng["dato4"] + ",")
                            csv_file.write(dicIng["dato5"] + ",")
                            csv_file.write(dicIng["dato6"] + ",")
                            csv_file.write(dicIng["dato7"] + ",")
                            csv_file.write(dicIng["dato8"] + ",")
                            csv_file.write(dicIng["dato9"] + ",")
                            csv_file.write(dicIng["dato10"] + ",")
                            csv_file.write(dicIng["dato11"] + ",")
                            csv_file.write(dicIng["dato12"] + ",")
                            csv_file.write(dicIng["dato13"] + ",")
                            csv_file.write(dicIng["dato14"] + ",")
                            csv_file.write(dicIng["dato15"] + ",")

                        else:
                            csv_file.write(",,,,,,,,,,,,,,,")

                        if ("datoAux1" in dicIng):
                            ##csv_file.write(dicIng["idCliente"] + ",")
                            csv_file.write(dicIng["datoAux1"] + ",")
                            csv_file.write(dicIng["datoAux2"] + ",")
                            csv_file.write(dicIng["datoAux3"] + ",")
                            csv_file.write(dicIng["datoAux4"] + ",")
                            csv_file.write(dicIng["datoAux5"] + ",")
                            csv_file.write(dicIng["datoAux6"] + ",")
                            csv_file.write(dicIng["datoAux7"] + ",")
                            csv_file.write(dicIng["datoAux8"] + ",")
                            csv_file.write(dicIng["datoAux9"] + ",")
                            csv_file.write(dicIng["datoAux10"] + ",")
                            csv_file.write(dicIng["datoAux11"] + ",")
                            csv_file.write(dicIng["datoAux12"] + ",")
                            csv_file.write(dicIng["datoAux13"] + ",")
                            csv_file.write(dicIng["datoAux14"] + ",")
                            csv_file.write(dicIng["datoAux5"] + ",")

                        else:
                            csv_file.write(",,,,,,,,,,,,,,,")

                        csv_file.write("\n")


        except Exception as err:
            self.wriErr.addMensaje("error----", err)
            WriteLog.writeLog(nameFunction, err)

        return dst


    ###Recorre Resultado Corto Cargo Abonos
    def recorreResCortoCargosAbonos():
        nameFunction = "recorreResCortoCargosAbonos" + self.reporteType

        try:

            dst = "Reportes" + self.agencia + "/CARGOSABONOS/CARes" + ".csv"

            if not os.path.exists(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))
            with open(dst, 'w') as csv_file:
                ### Titulos CSV
                ##GPD
                csv_file.write("Poliza" + ",")
                ##GPD
                csv_file.write("Concepto" + ",")
                ##GPD
                csv_file.write("Fecha" + ",")
                csv_file.write("Monto" + ",")
                ##GPD
                csv_file.write("Cuentas Abono" + ",")
                ##MON csv_file.write("Polizas Abono" + ",")
                ##GPD
                csv_file.write("Cuentas Cargo" + ",")
                ##MON csv_file.write("Polizas Cargo" + ",")
                csv_file.write("Estado" + ",")
                csv_file.write("\n")

                ##mini = 100
                ##maxi = -100
                CATodo = {}
                for clave in self.cargAbonTodo.keys():
                    cuentasAbono = self.cargAbonTodo[clave]["cuentasAbono"]
                    cuentasCargo = self.cargAbonTodo[clave]["cuentasCargo"]
                    diferencia = cuentasAbono - cuentasCargo
                    if diferencia == 0:
                        orden = (cuentasCargo * 100) + (
                    cuentasAbono * 10)  ##+ (abs(diferencia)*1000) ##+ cuentasAbono + cuentasCargo
                    else:
                        orden = (cuentasCargo * 10) + (cuentasAbono * 100) + 1000  ##+ (abs(diferencia)*1000)
                    CATodo[("00000000" + str(orden))[-5:] + "-25-" + clave] = diferencia
                ##orden =  (cuentasCargo*100) + (cuentasAbono*10) + ((diferencia)*1000)
                ##orden = '{:06d}'.format((cuentasCargo*100) + (cuentasAbono*10) + ((diferencia)*1000))
                ##CATodo[str(orden) + "-25-" + clave] = diferencia

                ##if mini > diferencia:
                ##mini = diferencia
                ##if maxi < diferencia:
                ##maxi = diferencia

                ### Contenido CSV
                ##for i in range(mini, maxi):
                ##print(i)
                for clave1 in sorted(CATodo.keys()):
                    clave = clave1.split("-25-")[1]
                    ##if(CATodo[clave1] == i):
                    ##GPD
                    poliza = clave.split("-")[0]
                    ##GPD
                    conceptoPoliza = self.cargAbonTodo[clave]["concepto"]
                    ##GPD
                    fecha1 = clave.split("-")[1]
                    ##GPD
                    monto = clave.split("-")[2]
                    ##MON monto = clave

                    ##GPD
                    csv_file.write(poliza + ",")
                    ##GPD
                    csv_file.write(conceptoPoliza + ",")
                    ##GPD
                    csv_file.write(fecha1 + ",")
                    csv_file.write(monto + ",")

                    cuentas = ""
                    for cuenta in sorted(self.cargAbonTodo[clave]["cuentaAbono"].keys()):
                        cuentas = cuentas + str(self.cargAbonTodo[clave]["cuentaAbono"][cuenta]) + "-"
                    csv_file.write(cuentas[:-1])
                    csv_file.write(",")

                    cuentas = ""
                    for cuenta in sorted(self.cargAbonTodo[clave]["cuentaCargo"].keys()):
                        cuentas = cuentas + str(self.cargAbonTodo[clave]["cuentaCargo"][cuenta]) + "-"
                    csv_file.write(cuentas[:-1])
                    csv_file.write(",")

                    ##GOPORDEN csv_file.write("'" + clave1.split("-25-")[0] + ",") ## + "-" + clave + ",")
                    if (CATodo[clave1] == 0):
                        csv_file.write("CONCILIADO" + ",")
                    else:
                        csv_file.write("NO CONCILIADO con diferencia de: " + str(abs(CATodo[clave1])) + ",")
                        csv_file.write("\n")

        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return


    ###Recorre Resultado Corto2
    def recorreResCorto2(self):
        nameFunction = "recorreResCorto2" + self.reporteType

        try:
            for cuenta in self.resTodo.keys():
                self.totales = {"1": 0, "2": 0, "3": 0, "4": 0}

                dst = self.directorio + self.subFolder + self.fecha[8:] + "/" + self.agencia + "/C_" + cuenta + "_al" + self.fecha[
                                                                                        8:] + self.fecha[
                                                                                              5:7] + self.fecha[
                                                                                                     2:4] + ".csv"

                if not os.path.exists(os.path.dirname(dst)):
                    os.makedirs(os.path.dirname(dst))
                with open(dst, 'w') as csv_file:
                    ### Titulos CSV
                    csv_file.write("Fecha" + ",")
                    csv_file.write("ConceptoReferenciaBanco" + ",")
                    csv_file.write("Cargo / Abono" + ",")
                    csv_file.write("TOTALES" + ",")
                    csv_file.write("\n")

                    ### Contenido CSV
                    lastStatus = ""
                    for idMov in sorted(self.resTodo[cuenta].keys()):
                        status = self.resTodo[cuenta][idMov]["status"]
                        banco = self.regresaBanco(cuenta, idMov)
                        icaav = self.regresaICAAV(cuenta, idMov)

                        if (status != lastStatus and lastStatus != "" and int(lastStatus[0]) < 5):
                            csv_file.write(",,," + str( self.totales[lastStatus[0]]))

                        if (int(status[0]) < 5):
                            self.totales[status[0]] = self.totales[status[0]] + banco['cargo'] + banco['abono'] + icaav['cargo'] + \
                                     icaav['abono']

                            if (status != lastStatus):
                                ##csv_file.write("\n," + self.titulosMedios[status[0]][0:40] + "," + self.titulosMedios[status[0]][41:] + "\n")
                                csv_file.write("\n," + self.titulosMedios[status[0]] + "," + "\n")

                            if (status[0] == "1"):
                                csv_file.write(banco["fecha"] + ",")
                                csv_file.write(banco["conceptoReferencia"] + ",")
                                csv_file.write(str(banco["abono"]) + ",")

                            if (status[0] == "2"):
                                csv_file.write(icaav["datosPolizaFecha"] + ",")
                                csv_file.write(icaav["detallePolizaTipo"] + "-" + icaav["detallePolizaNumPoliza"] + ",")
                                csv_file.write(str(icaav["cargo"]) + ",")

                            if (status[0] == "3"):
                                csv_file.write(banco["fecha"] + ",")
                                csv_file.write(banco["conceptoReferencia"] + ",")
                                csv_file.write(str(banco["cargo"]) + ",")

                            if (status[0] == "4"):
                                csv_file.write(icaav["datosPolizaFecha"] + ",")
                                csv_file.write(icaav["detallePolizaTipo"] + "-" + icaav["detallePolizaNumPoliza"] + ",")
                                csv_file.write(str(icaav["abono"]) + ",")

                            csv_file.write("\n")
                        lastStatus = status

                    if (lastStatus != "" and int(lastStatus[0]) < 5):
                        csv_file.write(",,," + str( self.totales[lastStatus[0]]))

                self.createReportPDF(cuenta)
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return


    ###Recorre Resultado Corto
    def recorreResCorto():
        nameFunction = "recorreResCorto" + self.reporteType


        try:
            for cuenta in self.resTodo.keys():
                self.totales = {"1": 0, "2": 0, "3": 0, "4": 0}
                dst = self.directorio + self.subFolder + self.fecha[8:] + "/" + self.agencia + "/C1_" + cuenta + "_al" + self.fecha[
                                                                                        8:] + self.fecha[
                                                                                              5:7] + self.fecha[
                                                                                                     2:4] + ".csv"

                if not os.path.exists(os.path.dirname(dst)):
                    os.makedirs(os.path.dirname(dst))
                with open(dst, 'w') as csv_file:
                    ### Titulos CSV
                    csv_file.write("Estatus" + ",")
                    csv_file.write("Fecha" + ",")
                    csv_file.write("CargoBanco" + ",")
                    csv_file.write("AbonoIcaav" + ",")
                    csv_file.write("AbonoBanco" + ",")
                    csv_file.write("CargoIcaav" + ",")
                    csv_file.write("ConceptoReferenciaBanco" + ",")
                    csv_file.write("\n")

                    ### Contenido CSV
                    for idMov in sorted(self.resTodo[cuenta].keys()):
                        status = self.resTodo[cuenta][idMov]["status"]
                        banco = self.regresaBanco(cuenta, idMov)
                        icaav = self.regresaICAAV(cuenta, idMov)

                        if (int(status[0]) < 5):
                            self.totales[status[0]] = self.totales[status[0]] + banco['cargo'] + banco['abono'] + icaav['cargo'] + \
                                     icaav['abono']

                            csv_file.write(status[2:] + ",")
                            if (banco["fecha"] != ""):
                                csv_file.write(banco["fecha"] + ",")
                            else:
                                csv_file.write(icaav["datosPolizaFecha"] + ",")
                            csv_file.write(str(banco["cargo"]) + ",")
                            csv_file.write(str(icaav["abono"]) + ",")
                            csv_file.write(str(banco["abono"]) + ",")
                            csv_file.write(str(icaav["cargo"]) + ",")
                            if (banco["conceptoReferencia"] != ""):
                                csv_file.write(banco["conceptoReferencia"] + ",")
                            else:
                                csv_file.write(icaav["detallePolizaTipo"] + "-" + icaav["detallePolizaNumPoliza"] + ",")
                            csv_file.write("\n")
                self.createReportPDF(cuenta)
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return


    ###Recorre Resultado
    def recorreRes():
        nameFunction = "recorreRes" + self.reporteType

        try:
            ##fecha (banco), datos póliza fecha(icaav),
            ##cargo 1 (banco), abono 2 (icaav),
            ##concepto referencia (banco), detalle póliza referencia (icaav), detalle póliza concepto mov (icaav),
            ##Abono 1(banco),cargo 2 (icaav),
            ##detalle póliza tipo (icaav), detalle póliza núm póliza (icaav)

            for cuenta in self.resTodo.keys():

                dst = self.directorio + self.subFolder + self.fecha[8:] + "/" + self.agencia + "/REP_" + cuenta + "_al" + self.fecha[
                                                                                        8:] + self.fecha[
                                                                                              5:7] + self.fecha[
                                                                                                     2:4] + ".csv"

                if not os.path.exists(os.path.dirname(dst)):
                    os.makedirs(os.path.dirname(dst))
                with open(dst, 'w') as csv_file:
                    ### Titulos CSV
                    csv_file.write("Estatus" + ",")
                    csv_file.write("Cuenta" + ",")
                    csv_file.write("FechaBanco" + ",")
                    csv_file.write("DatosPolizaFechaIcaav" + ",")
                    csv_file.write("CargoBanco" + ",")
                    csv_file.write("AbonoIcaav" + ",")
                    csv_file.write("ConceptoReferenciaBanco" + ",")
                    csv_file.write("DetallePolizaReferencia" + ",")
                    csv_file.write("DetallePolizaConceptoMov" + ",")
                    csv_file.write("AbonoBanco" + ",")
                    csv_file.write("CargoIcaav" + ",")
                    csv_file.write("DetallePolizaTipo" + ",")
                    csv_file.write("DetallePolizaNumPoliza" + ",")
                    csv_file.write("\n")

                    ### Contenido CSV
                    for idMov in sorted(self.resTodo[cuenta].keys()):
                        status = self.resTodo[cuenta][idMov]["status"]
                        banco = self.regresaBanco(cuenta, idMov)
                        icaav = self.regresaICAAV(cuenta, idMov)

                        csv_file.write(status[2:] + ",")
                        csv_file.write(cuenta + ",")
                        csv_file.write(banco["fecha"] + ",")
                        csv_file.write(icaav["datosPolizaFecha"] + ",")
                        csv_file.write(str(banco["cargo"]) + ",")
                        csv_file.write(str(icaav["abono"]) + ",")
                        csv_file.write(banco["conceptoReferencia"] + ",")
                        csv_file.write(icaav["detallePolizaReferencia"] + ",")
                        csv_file.write(icaav["detallePolizaConceptoMov"] + ",")
                        csv_file.write(str(banco["abono"]) + ",")
                        csv_file.write(str(icaav["cargo"]) + ",")
                        csv_file.write(icaav["detallePolizaTipo"] + ",")
                        csv_file.write(icaav["detallePolizaNumPoliza"] + ",")
                        csv_file.write("\n")
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ### Agrega a Dictionario de Resultado
    def agregaDicRes(self,cuenta, idMovBanco, idMovIcaav, status):
        nameFunction = "agregaDicRes"
        
        try:
            llegue = 0
            if (cuenta not in self.resTodo):
                self.resTodo[cuenta] = {}

            idMovResSort = status[0] + str( self.idMovRes)

            self.resTodo[cuenta][idMovResSort] = {}

            self.resTodo[cuenta][idMovResSort]["status"] = status

            ### agrego ambos diccionarios a un nuevo diccionario
            if (idMovBanco != -1):
                # si idMov no es nulo entonces lo agrego en en resultado
                self.resTodo[cuenta][idMovResSort]['banco'] = self.bancoTodo[cuenta][idMovBanco]
            if (idMovIcaav != -1):
                # si idMov no es nulo entonces lo agrego en en resultado
                self.resTodo[cuenta][idMovResSort]['icaav'] = self.icaavTodo[cuenta][idMovIcaav]

            ### remuevo de ambos diccionarios los movimientos
            llegue = 4
            if cuenta in self.bancoTodo and idMovBanco in self.bancoTodo[cuenta]:
                llegue = 5
                del self.bancoTodo[cuenta][idMovBanco]
                llegue = 7
            if cuenta in self.icaavTodo and idMovIcaav in self.icaavTodo[cuenta]:
                llegue = 6
                del self.icaavTodo[cuenta][idMovIcaav]
                llegue = 8

            ##input( self.resTodo)
            self.idMovRes = self.idMovRes + 1

        except Exception as err:
            ##print( self.bancoTodo)
            ##print(cuenta)
            ##print(idMovBanco)
            ##print(idMovIcaav)
            ##print(llegue)
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Recorre Banco
    def recorreBanco(self):
        nameFunction = "recorreBanco" + self.reporteType

        try:
            ##fecha (banco), datos póliza fecha(icaav),
            ##cargo 1 (banco), abono 2 (icaav),
            ##concepto referencia (banco), detalle póliza referencia (icaav), detalle póliza concepto mov (icaav),
            ##Abono 1(banco),cargo 2 (icaav),
            ##detalle póliza tipo (icaav), detalle póliza núm póliza (icaav)
            for cuenta in sorted( self.bancoTodo.keys()):
                ##print cuenta, dicCuenta
                for idMovBanco in sorted(list( self.bancoTodo[cuenta].keys())):
                    cargo = self.bancoTodo[cuenta][idMovBanco]['cargo']
                    abono = self.bancoTodo[cuenta][idMovBanco]["abono"]
                    if (cuenta in self.icaavTodo):
                        for idMovIcaav in self.icaavTodo[cuenta].keys():
                            if (cargo != 0.0 and cargo == self.icaavTodo[cuenta][idMovIcaav]["abono"]):
                                ### son iguales el cargo del banco y el abono de Icaav
                                self.agregaDicRes(cuenta, idMovBanco, idMovIcaav, "5 ok Cargo Banco en Abono Icaav")
                                break

                            elif (abono != 0.0 and abono == self.icaavTodo[cuenta][idMovIcaav]["cargo"]):
                                ### son iguales el abono del banco y el cargo de Icaav
                                self.agregaDicRes(cuenta, idMovBanco, idMovIcaav, "6 ok Abono Banco en Cargo Icaav")
                                break
                    if idMovBanco in self.bancoTodo[cuenta]:
                        ### no se encontro el cargo o abono en el de icaav, se agrega al resultado con 0 en icaav
                        if (cargo != 0.0):
                            self.agregaDicRes(cuenta, idMovBanco, -1, "3 Ca Ban y FALTA Abono ICAAV")
                        elif (abono != 0.0):
                            self.agregaDicRes(cuenta, idMovBanco, -1, "1 Ab Ban y FALTA Cargo ICAAV")
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Reocrre ICAAV
    def recorreICAAV(self):
        nameFunction = "recorreICAAV" + self.reporteType

        try:
            for cuenta in list( self.icaavTodo.keys()):
                for idMovIcaav in list( self.icaavTodo[cuenta].keys()):
                    cargo = self.icaavTodo[cuenta][idMovIcaav]['cargo']
                    abono = self.icaavTodo[cuenta][idMovIcaav]["abono"]
                    if (cargo != 0.0):
                        self.agregaDicRes(cuenta, -1, idMovIcaav, "2 Ca ICA y FALTA Abono Banco")
                    elif (abono != 0.0):
                        self.agregaDicRes(cuenta, -1, idMovIcaav, "4 Ab ICA y FALTA Cargo Banco")
        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Extracts Info to be analized
    def extractInfo(self):
        nameFunction = "extractInfo" + self.reporteType

        try:
            continuar = True
            srcICAAV = self.directorio + self.subFolder + "/ICAAV " + self.agencia + ".csv"
            srcBancos = self.directorio + self.subFolder + "/Bancos " + self.agencia + ".csv"
            srcSaldos = self.directorio + self.subFolder + "/Saldos " + self.agencia + ".csv"
            try:
                file1 = open(srcICAAV, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                ##print("El archivo " + srcICAAV + " no existe.")
                continuar = False
                self.wriErr.addMensaje("error", "El archivo Auxiliar de ICAAV para la agencia " + self.agencia +  " no existe para el mes y el año seleccionado [" + self.fecha + "].")
                self.wriErr.addMensaje("info",
                                       "El archivo es:" + srcICAAV)

            try:
                file2 = open(srcBancos, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                ##print("El archivo " + srcBancos + " no existe.")
                continuar = False
                self.wriErr.addMensaje("error", "El archivo de Bancos para la agencia " + self.agencia +  " no existe para el mes y el año seleccionado [" + self.fecha + "].")

            try:
                file3 = open(srcSaldos, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                ##print("El archivo " + srcSaldos + " no existe.")
                continuar = False
                self.wriErr.addMensaje("error", "El archivo de Saldos para la agencia " + self.agencia +  " no existe para el mes y el año seleccionado [" + self.fecha + "].")

            if(continuar):
                ##fecha (banco), datos póliza fecha(icaav),
                ##cargo 1 (banco), abono 2 (icaav),
                ##concepto referencia (banco), detalle póliza referencia (icaav), detalle póliza concepto mov (icaav),
                ##Abono 1(banco),cargo 2 (icaav),
                ##detalle póliza tipo (icaav), detalle póliza núm póliza (icaav)
                ## 7 de iccav
                ## 4 de banco

                self.icaavTodo = {}
                idMov = 1
                line = ""
                for line in file1:
                    if (line.split(',')[8] != "cargo" and line[0:3] != ",,,"):
                        ##input(line)
                        cuenta = line.split(',')[0]  ##[:-1]

                        detallePolizaTipo = line.split(',')[1]
                        detallePolizaNumPoliza = line.split(',')[2]
                        detallePolizaReferencia = line.split(',')[6]
                        detallePolizaConceptoMov = line.split(',')[7]
                        cargo = float(line.split(',')[8])
                        abono = float(line.split(',')[9])
                        datosPolizaFecha = line.split(',')[14]
                        if (cuenta not in self.icaavTodo):
                            self.icaavTodo[cuenta] = {}
                        self.icaavTodo[cuenta][idMov] = {}
                        self.icaavTodo[cuenta][idMov]['detallePolizaTipo'] = detallePolizaTipo
                        self.icaavTodo[cuenta][idMov]['detallePolizaNumPoliza'] = detallePolizaNumPoliza
                        self.icaavTodo[cuenta][idMov]['detallePolizaReferencia'] = detallePolizaReferencia
                        self.icaavTodo[cuenta][idMov]['detallePolizaConceptoMov'] = detallePolizaConceptoMov
                        self.icaavTodo[cuenta][idMov]['cargo'] = cargo
                        self.icaavTodo[cuenta][idMov]['abono'] = abono
                        self.icaavTodo[cuenta][idMov]['datosPolizaFecha'] = datosPolizaFecha
                        idMov = idMov + 1
                file1.close()

                ##print( self.icaavTodo)

                self.bancoTodo = {}
                idMov = 1
                for line in file2:
                    if (line.split(',')[2] != "cargo" and line[0:3] != ",,,"):
                        cuenta = line.split(',')[4].replace("\n", "")  ##[:-1]
                        if (cuenta not in self.bancoTodo):
                            self.bancoTodo[cuenta] = {}
                        self.bancoTodo[cuenta][idMov] = {}
                        self.bancoTodo[cuenta][idMov]['fecha'] = line.split(',')[0]
                        self.bancoTodo[cuenta][idMov]['conceptoReferencia'] = line.split(',')[1]
                        if (line.split(',')[2] != ""):
                            self.bancoTodo[cuenta][idMov]['cargo'] = float(line.split(',')[2])
                        else:
                            self.bancoTodo[cuenta][idMov]['cargo'] = 0.0
                        if (line.split(',')[3] != ""):
                            self.bancoTodo[cuenta][idMov]['abono'] = float(line.split(',')[3])
                        else:
                            self.bancoTodo[cuenta][idMov]['abono'] = 0.0
                        idMov = idMov + 1

                file2.close()

                ##print( self.bancoTodo)

                self.saldosTodo = {}
                for line in file3:
                    if (line.split(',')[0].upper() != "CUENTA" and line[0:3] != ",,,"):
                        cuenta = line.split(',')[0].replace("\n", "")  ##[:-1]
                        if (cuenta not in self.saldosTodo):
                            self.saldosTodo[cuenta] = {}
                        self.saldosTodo[cuenta]["ICAAV"] = float(line.split(',')[1])
                        self.saldosTodo[cuenta]["BANCOS"] = float(line.split(',')[2])

                file3.close()

                ##print(self.saldosTodo)

        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction + line, err)

        return

    ###Extracts Info to be analized
    def extractInfoCargosAbonos():
        nameFunction = "extractInfoCargosAbonos" + self.reporteType

        try:

            srcCargoAbonos = self.directorio + "CARGOSABONOS/CARGOSABONOS" + self.agencia + ".csv"
            try:
                file1 = open(srcCargoAbonos, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                print("El archivo " + srcCargoAbonos + " no existe.")

            self.cargAbonTodo = {}
            idMov = 1
            for line in file1:
                ##input(line)
                ##GPD
                if (line.split(',')[5].upper() != "CARGO" and line[0:3] != ",,,"):
                    ##MON if(line.split(',')[8].upper() != "CARGO" and line[0:3] != ",,,"):
                    ##input(line)
                    ##GPD
                    cuenta = line.split(',')[0]  ##[:-1]
                    ##GPD
                    poliza = line.split(',')[1]
                    ##GPD
                    cargo = float(line.split(',')[5])
                    ##GPD
                    abono = float(line.split(',')[6])
                    ##GPD
                    monto = cargo + abono
                    ##GPD
                    datosPolizaFecha = line.split(',')[9][:-1]
                    ##MON cuenta = line.split(',')[0]##[:-1]
                    ##MON poliza = line.split(',')[1] + line.split(',')[2]
                    ##MON cargo=float(line.split(',')[8])
                    ##MON abono=float(line.split(',')[9])
                    ##MON monto = cargo + abono
                    ##MON datosPolizaFecha=line.split(',')[14]
                    ##GPD
                    clave = poliza + "-" + datosPolizaFecha + "-" + str(monto)
                    ##MON clave = str(monto)
                    if (clave not in self.cargAbonTodo):
                        self.cargAbonTodo[clave] = {}
                        self.cargAbonTodo[clave]["cuentaAbono"] = {}
                        self.cargAbonTodo[clave]["cuentaCargo"] = {}
                        self.cargAbonTodo[clave]["cuentasAbono"] = 0
                        self.cargAbonTodo[clave]["cuentasCargo"] = 0
                    ##GPD
                    self.cargAbonTodo[clave]["concepto"] = line.split(',')[4]
                    ##MON self.cargAbonTodo[clave]["concepto"] = line.split(',')[3]
                    if cargo <= 0:
                        ##GPD
                        self.cargAbonTodo[clave]["cuentaAbono"][idMov] = cuenta
                        ##MON self.cargAbonTodo[clave]["cuentaAbono"][idMov] = poliza
                        self.cargAbonTodo[clave]["cuentasAbono"] = self.cargAbonTodo[clave]["cuentasAbono"] + 1
                    else:
                        ##GPD
                        self.cargAbonTodo[clave]["cuentaCargo"][idMov] = cuenta
                        ##MON self.cargAbonTodo[clave]["cuentaCargo"][idMov] = poliza
                        self.cargAbonTodo[clave]["cuentasCargo"] = self.cargAbonTodo[clave]["cuentasCargo"] + 1
                    idMov = idMov + 1
            file1.close()

        ##print( self.cargAbonTodo)


        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Extracts Info to be analized
    def extractInfoVentasIngresos():
        nameFunction = "extractInfoVentasIngresos" + self.reporteType

        try:

            srcVentas = self.directorio + "VentasIngresos/Ventas" + self.agencia + ".csv"
            try:
                file1 = open(srcVentas, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                print("El archivo " + srcVentas + " no existe.")

            self.ventasIngresos = {}
            for line in file1:
                if (line.split(',')[0] != "datos_factura_id_cliente" and line[0:3] != ",,,"):
                    ##print( self.ventasIngresos)
                    ##input(line)
                    ##GPD
                    idCliente = line.split(',')[0]  ##[:-1]
                    dbe = line.split(',')[1]
                    numDbe = line.split(',')[2]
                    detalleNumBol = line.split(',')[4]
                    detalleConcepto = line.split(',')[5]
                    base = float(line.split(',')[7])
                    iva = float(line.split(',')[8])
                    tua = float(line.split(',')[9])
                    total = base + iva + tua
                    fechaFactura = line.split(',')[13]

                    clave = dbe + "-25-" + numDbe
                    if (clave not in self.ventasIngresos):
                        self.ventasIngresos[clave] = {}
                        tam = 1
                    else:
                        tam = len( self.ventasIngresos[clave]) + 1

                    if (total != 0):
                        self.ventasIngresos[clave][tam] = {}
                        self.ventasIngresos[clave][tam]["idCliente"] = idCliente
                        self.ventasIngresos[clave][tam]["detalleNumBol"] = detalleNumBol
                        self.ventasIngresos[clave][tam]["detalleConcepto"] = detalleConcepto
                        self.ventasIngresos[clave][tam]["base"] = base
                        self.ventasIngresos[clave][tam]["iva"] = iva
                        self.ventasIngresos[clave][tam]["tua"] = tua
                        self.ventasIngresos[clave][tam]["total"] = total
                        self.ventasIngresos[clave][tam]["fechaFactura"] = fechaFactura

            file1.close()

            srcIngresos = self.directorio + "VentasIngresos/Ingresos" + self.agencia + ".csv"
            try:
                file1 = open(srcIngresos, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                print("El archivo " + srcIngresos + " no existe.")

            for line in file1:
                if (line.split(',')[0] != "cuentas_contab_cuen_num_cuenta" and line[0:3] != ",,,"):
                    cuenta = line.split(',')[0]  ##[:-1]
                    poliza = line.split(',')[1]
                    numPoliza = line.split(',')[2]
                    dbe = line.split(',')[4]
                    numDbe = line.split(',')[5]
                    cargo = float(line.split(',')[8])
                    abono = float(line.split(',')[9])
                    datosPolizaFecha = line.split(',')[14]

                    clave = dbe + "-25-" + numDbe
                    if (clave not in self.ventasIngresos):
                        self.ventasIngresos[clave] = {}
                        tam = 1
                        self.ventasIngresos[clave][tam] = {}
                    else:
                        tam = 1
                        while (tam in self.ventasIngresos[clave] and "cuenta" in self.ventasIngresos[clave][tam]):
                            tam = tam + 1

                    if (tam > len( self.ventasIngresos[clave])):
                        self.ventasIngresos[clave][tam] = {}

                    if (abono > 0):
                        if ("idCliente" not in self.ventasIngresos[clave][tam]):
                            self.ventasIngresos[clave][tam] = {}
                            ##print(tam)
                            ##input(line)
                        self.ventasIngresos[clave][tam]["cuenta"] = cuenta
                        self.ventasIngresos[clave][tam]["poliza"] = poliza
                        self.ventasIngresos[clave][tam]["numPoliza"] = numPoliza
                        self.ventasIngresos[clave][tam]["cargo"] = cargo
                        self.ventasIngresos[clave][tam]["abono"] = abono
                        self.ventasIngresos[clave][tam]["datosPolizaFecha"] = datosPolizaFecha
                        ##input(line)
                        ##print( self.ventasIngresos)

            srcIngresosClientes = self.directorio + "VentasIngresos/IngresosClientes" + self.agencia + ".csv"
            try:
                file1 = open(srcIngresosClientes, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                print("El archivo " + srcIngresosClientes + " no existe.")

            fechaPIAnterior = ""
            polizaPIAnterior = ""
            numPolizaPIAnterior = ""
            mesAnterior = ""
            idMov = 0

            for line in file1:
                idMov = idMov + 1

                if (line[0:5] != ",,,,,"):

                    ##try:
                    fechaPI = line.split(',')[0]  ##[:-1]
                    ##except Exception as err:
                    ##fechaPI = ""

                    ##try:
                    polizaPI = line.split(',')[1]
                    ##except Exception as err:
                    ##polizaPI = ""

                    ##try:
                    numPolizaPI = line.split(',')[2]
                    ##except Exception as err:
                    ##numPolizaPI = ""

                    cuentaPI = line.split(',')[3]

                    if (line.split(',')[4].strip() != ""):
                        ingreso = float(line.split(',')[4])
                    else:
                        ingreso = 0
                    if (line.split(',')[5].strip() != ""):
                        egreso = float(line.split(',')[5])
                    else:
                        egreso = 0

                    if (line.split(',')[6] != ""):
                        dbe = line.split(',')[6]
                    else:
                        dbe = "DEP"

                    if (line.split(',')[7].strip() != ""):
                        numDbe = line.split(',')[7]
                    else:
                        numDbe = ""

                    cuentaReporte = line.split(',')[8][:-1]
                    mes = fechaPI[3:5]

                    clave = dbe + "-25-" + numDbe
                    if (clave not in self.ventasIngresos):
                        self.ventasIngresos[clave] = {}
                        tam = 1
                        self.ventasIngresos[clave][tam] = {}
                    else:
                        tam = 1
                        while (tam in self.ventasIngresos[clave] and "fechaPI" in self.ventasIngresos[clave][tam]):
                            tam = tam + 1
                    if (tam > len( self.ventasIngresos[clave])):
                        self.ventasIngresos[clave][tam] = {}
                    if ("idCliente" not in self.ventasIngresos[clave][tam] and "cuenta" not in self.ventasIngresos[clave][tam]):
                        self.ventasIngresos[clave][tam] = {}

                    self.ventasIngresos[clave][tam]["idMov"] = idMov

                    if (fechaPI != ""):
                        self.ventasIngresos[clave][tam]["fechaPI"] = fechaPI
                        self.ventasIngresos[clave][tam]["polizaPI"] = polizaPI
                        self.ventasIngresos[clave][tam]["numPolizaPI"] = numPolizaPI
                        self.ventasIngresos[clave][tam]["mes"] = mes
                        fechaPIAnterior = fechaPI
                        polizaPIAnterior = polizaPI
                        numPolizaPIAnterior = numPolizaPI
                        mesAnterior = mes
                    else:
                        self.ventasIngresos[clave][tam]["fechaPI"] = fechaPIAnterior
                        self.ventasIngresos[clave][tam]["polizaPI"] = polizaPIAnterior
                        self.ventasIngresos[clave][tam]["numPolizaPI"] = numPolizaPIAnterior
                        self.ventasIngresos[clave][tam]["mes"] = mesAnterior

                    self.ventasIngresos[clave][tam]["cuentaPI"] = cuentaPI
                    self.ventasIngresos[clave][tam]["ingreso"] = ingreso
                    self.ventasIngresos[clave][tam]["egreso"] = egreso
                    self.ventasIngresos[clave][tam]["cuentaReporte"] = cuentaReporte



                    ##input(line)
                    ##print( self.ventasIngresos)


        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)

        return

    ###Extracts Info to be analized
    def extractInfoArchivoMontoClave(self):
        nameFunction = "extractInfoArchivoMontoClaveBase" + self.reporteType

        try:
            continuar = True
            srcBase = self.directorio + self.subFolder + "Base " + self.agencia + ".csv"
            srcAConciliar = self.directorio + self.subFolder + "AConciliar " + self.agencia + ".csv"
            try:
                file1 = open(srcBase, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                ##print("El archivo " + srcBase + " no existe.")
                continuar = False
                self.wriErr.addMensaje("error", "El archivo Base para el usuario " + self.agencia +  " no existe.")
                self.wriErr.addMensaje("info",
                                       "El archivo es:" + srcBase)

            try:
                file2 = open(srcAConciliar, "r", encoding="utf8", errors='ignore')
            except Exception as err:
                ##print("El archivo " + srcAConciliar + " no existe.")
                continuar = False
                self.wriErr.addMensaje("error", "El archivo a Conciliar para el usuario " + self.agencia + " no existe.")
                self.wriErr.addMensaje("info",
                                       "El archivo es:" + srcAConciliar)
            clave="";
            if(continuar):
                self.baseTodo = {}
                line = ""
                for line in file1:
                    if (line[0:3] != ",,,"):
                        ##input(line)
                        monto = line.split(',')[1]  ##[:-1]

                        clave = line.split(',')[2]
                        fecha = line.split(',')[3]
                        otro = line.split(',')[4]
                        dato1 = line.split(',')[5]
                        dato2 = line.split(',')[6]
                        dato3 = line.split(',')[7]
                        dato4 = line.split(',')[8]
                        dato5 = line.split(',')[9]
                        dato6 = line.split(',')[10]
                        dato7 = line.split(',')[11]
                        dato8 = line.split(',')[12]
                        dato9 = line.split(',')[13]
                        dato10 = line.split(',')[14]
                        dato11 = line.split(',')[15]
                        dato12 = line.split(',')[16]
                        dato13 = line.split(',')[17]
                        dato14 = line.split(',')[18]
                        dato15 = line.split(',')[19]

                        if (clave not in self.ventasIngresos):
                            self.baseTodo[clave] = {}
                            tam = 1
                        else:
                            tam = len(self.baseTodo[clave]) + 1

                        self.baseTodo[clave][tam] = {}
                        self.baseTodo[clave][tam]["monto"] = float(monto)
                        self.baseTodo[clave][tam]["fecha"] = fecha
                        self.baseTodo[clave][tam]["otro"] = otro
                        self.baseTodo[clave][tam]["dato1"] = dato1
                        self.baseTodo[clave][tam]["dato2"] = dato2
                        self.baseTodo[clave][tam]["dato3"] = dato3
                        self.baseTodo[clave][tam]["dato4"] = dato4
                        self.baseTodo[clave][tam]["dato5"] = dato5
                        self.baseTodo[clave][tam]["dato6"] = dato6
                        self.baseTodo[clave][tam]["dato7"] = dato7
                        self.baseTodo[clave][tam]["dato8"] = dato8
                        self.baseTodo[clave][tam]["dato9"] = dato9
                        self.baseTodo[clave][tam]["dato10"] = dato10
                        self.baseTodo[clave][tam]["dato11"] = dato11
                        self.baseTodo[clave][tam]["dato12"] = dato12
                        self.baseTodo[clave][tam]["dato13"] = dato13
                        self.baseTodo[clave][tam]["dato14"] = dato14
                        self.baseTodo[clave][tam]["dato15"] = dato15

                        self.baseTodo[clave][tam]["montoAux"] = 0
                        self.baseTodo[clave][tam]["fechaAux"] = ""
                        self.baseTodo[clave][tam]["otroAux"] = ""
                        self.baseTodo[clave][tam]["datoAux1"] = "-"
                        self.baseTodo[clave][tam]["datoAux2"] = ""
                        self.baseTodo[clave][tam]["datoAux3"] = ""
                        self.baseTodo[clave][tam]["datoAux4"] = ""
                        self.baseTodo[clave][tam]["datoAux5"] = ""
                        self.baseTodo[clave][tam]["datoAux6"] = ""
                        self.baseTodo[clave][tam]["datoAux7"] = ""
                        self.baseTodo[clave][tam]["datoAux8"] = ""
                        self.baseTodo[clave][tam]["datoAux9"] = ""
                        self.baseTodo[clave][tam]["datoAux10"] = ""
                        self.baseTodo[clave][tam]["datoAux11"] = ""
                        self.baseTodo[clave][tam]["datoAux12"] = ""
                        self.baseTodo[clave][tam]["datoAux13"] = ""
                        self.baseTodo[clave][tam]["datoAux14"] = ""
                        self.baseTodo[clave][tam]["datoAux15"] = ""


                file1.close()

                for line in file2:
                    if (line[0:3] != ",,,"):
                        ##input(line)
                        monto = line.split(',')[1]  ##[:-1]

                        clave = line.split(',')[2]
                        fecha = line.split(',')[3]
                        otro =  line.split(',')[4]
                        dato1 = line.split(',')[5]
                        dato2 = line.split(',')[6]
                        dato3 = line.split(',')[7]
                        dato4 = line.split(',')[8]
                        dato5 = line.split(',')[9]
                        dato6 = line.split(',')[10]
                        dato7 = line.split(',')[11]
                        dato8 = line.split(',')[12]
                        dato9 = line.split(',')[13]
                        dato10 = line.split(',')[14]
                        dato11 = line.split(',')[15]
                        dato12 = line.split(',')[16]
                        dato13 = line.split(',')[17]
                        dato14 = line.split(',')[18]
                        dato15 = line.split(',')[19]

                        if (clave not in self.baseTodo):
                            self.baseTodo[clave] = {}
                            tam = 1
                            self.baseTodo[clave][tam] = {}
                        else:
                            tam = 1
                            while (tam in self.baseTodo[clave] and "dato1" not in self.baseTodo[clave][tam]):
                                tam = tam + 1

                        if (tam > len(self.baseTodo[clave])):
                            self.baseTodo[clave][tam] = {}

                        if ("dato1" not in self.baseTodo[clave][tam]):
                            self.baseTodo[clave][tam] = {}
                            self.baseTodo[clave][tam]["monto"] = 0
                            self.baseTodo[clave][tam]["fecha"] = ""
                            self.baseTodo[clave][tam]["otro"] = ""
                            self.baseTodo[clave][tam]["dato1"] = "-"
                            self.baseTodo[clave][tam]["dato2"] = ""
                            self.baseTodo[clave][tam]["dato3"] = ""
                            self.baseTodo[clave][tam]["dato4"] = ""
                            self.baseTodo[clave][tam]["dato5"] = ""
                            self.baseTodo[clave][tam]["dato6"] = ""
                            self.baseTodo[clave][tam]["dato7"] = ""
                            self.baseTodo[clave][tam]["dato8"] = ""
                            self.baseTodo[clave][tam]["dato9"] = ""
                            self.baseTodo[clave][tam]["dato10"] = ""
                            self.baseTodo[clave][tam]["dato11"] = ""
                            self.baseTodo[clave][tam]["dato12"] = ""
                            self.baseTodo[clave][tam]["dato13"] = ""
                            self.baseTodo[clave][tam]["dato14"] = ""
                            self.baseTodo[clave][tam]["dato15"] = ""

                        self.baseTodo[clave][tam]["montoAux"] = float(monto)
                        self.baseTodo[clave][tam]["fechaAux"] = fecha
                        self.baseTodo[clave][tam]["otroAux"] = otro
                        self.baseTodo[clave][tam]["datoAux1"] = dato1
                        self.baseTodo[clave][tam]["datoAux2"] = dato2
                        self.baseTodo[clave][tam]["datoAux3"] = dato3
                        self.baseTodo[clave][tam]["datoAux4"] = dato4
                        self.baseTodo[clave][tam]["datoAux5"] = dato5
                        self.baseTodo[clave][tam]["datoAux6"] = dato6
                        self.baseTodo[clave][tam]["datoAux7"] = dato7
                        self.baseTodo[clave][tam]["datoAux8"] = dato8
                        self.baseTodo[clave][tam]["datoAux9"] = dato9
                        self.baseTodo[clave][tam]["datoAux10"] = dato10
                        self.baseTodo[clave][tam]["datoAux11"] = dato11
                        self.baseTodo[clave][tam]["datoAux12"] = dato12
                        self.baseTodo[clave][tam]["datoAux13"] = dato13
                        self.baseTodo[clave][tam]["datoAux14"] = dato14
                        self.baseTodo[clave][tam]["datoAux15"] = dato15

                file2.close()

            print(self.baseTodo['00A9EBB6-C2AB-4DD2-AD0D-58CD8D397D6D'])

        except Exception as err:
            self.wriErr.addMensaje("error" + clave, err)
            WriteLog.writeLog(nameFunction + line, err)

        return

    ###Main
    def main():
        nameFunction = "main"

        try:
            ###getConfiguration()

            ##3WriteLog.writeStatusRename("START")

            self.fecha = time.strftime("%d/%m/%Y")
            ##input(self.fecha[0:2])
            ##input(self.fecha[3:5])
            ##input(self.fecha[6:])

            ### Conciliacion Bancos/ICAAV
            extractInfo()
            recorreBanco()
            recorreICAAV()
            ###recorreRes()
            ###recorreResCorto()
            recorreResCorto2()

            ### Conciliacion Abonos Cargos
            ##extractInfoCargosAbonos()
            ##recorreResCortoCargosAbonos()

            ### Conciliacion Abonos Cargos
            ##extractInfoVentasIngresos()
            ##recorreResCortoVentasIngresos()


            print("Gracias por la espera, tus reportes estan listos.")

        ###WriteLog.writeStatusRename("END")

        except Exception as err:
            self.wriErr.addMensaje("error", err)
            WriteLog.writeLog(nameFunction, err)
        return

    if __name__ == "__main__": main()
