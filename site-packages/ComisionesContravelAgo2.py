### Escribe archivos LOG
from ClasesGenericas import WriteLog, RWConfig, SendEmail, WriteErrors
import os
import warnings

warnings.filterwarnings("ignore")

class ComisionesContravel:

	def __init__(self, sem, an, mes, nomArch, rutArch, repTyp):
		nameFunction = "setInfoParametros1"

		try:
			### Global Variables
			self.wriErr = WriteErrors.WriteErrors() ##.mensajesErr = {}

			### Configuration Variables
			self.semana = sem
			self.ano = an[2:]
			self.directorio = rutArch
			self.reporteType = repTyp
			self.nombreArchivo = nomArch

			self.readIATACodes()
			self.readExcepciones()

			##print("Gracias, estoy procesando tus reportes, se crearan en la carpeta:" + self.directorio + "ReportesS" + self.semana)
		except Exception as err:
			WriteLog.writeLog(nameFunction, err)

	###Reads the CSV of icaav to set comisiones
	def readCsvIcaav(self):
		nameFunction = "readCsvIcaav"	
		try:
			numBoleto = "---"
			linea = "---"
			src= self.directorio + self.nombreArchivo
			try:
				file1 = open(src, "r",encoding="utf8",errors='ignore')
			except Exception as err:
				print("El archivo " + src  + " no existe.")
			icaavTodo = {}
			idMov = 0
			for line in file1:
				icaavTodo[idMov] = {}
	
				numBoleto = line.split(',')[15].center(12)[:12]
				##print("Num Boleto: " + numBoleto)
				icaavTodo[idMov]['numBoleto'] = numBoleto

				linea = line
				
				idCliente = line.split(',')[0]
				##print("idCliente: " + idCliente)
				icaavTodo[idMov]['idCliente'] = idCliente.zfill(6)
	
				cliente = line.split(',')[1]
				##print("Cliente: " + cliente)
				icaavTodo[idMov]['cliente'] = cliente
				
				seriaFac = line.split(',')[4]
				icaavTodo[idMov]['serieFac'] = seriaFac
				
				numFac = line.split(',')[5]
				##print("Factura: " + seriaFac + numFac)
				icaavTodo[idMov]['numFac'] = numFac

				fecha = line.split(',')[6]
				icaavTodo[idMov]['fecha'] = fecha

				pasajero = line.split(',')[9]
				icaavTodo[idMov]['pasajero'] = pasajero
				
				ruta = line.split(',')[11].split('/')
				####print("Ruta: " + str(ruta))
				icaavTodo[idMov]['ruta'] = ruta

				tamRuta = len(icaavTodo[idMov]["ruta"])
				dicPaises = {}
				dicCiudades = {}
				for i in range(0,tamRuta-1):
					ciudad = icaavTodo[idMov]["ruta"][i]
					paisCiudad = self.regresaPais(ciudad)
					if(paisCiudad not in dicPaises):
						dicPaises[paisCiudad] = paisCiudad
					if(ciudad not in dicCiudades):
						dicCiudades[ciudad] = ciudad
				##input(dicPaises)
				icaavTodo[idMov]['dicPaises'] = dicPaises
				##input(dicPaises)
				icaavTodo[idMov]['dicCiudades'] = dicCiudades
				icaavTodo[idMov]["ciudadOrigen"] = ruta[0]
				icaavTodo[idMov]["paisOrigen"] = self.regresaPais(ruta[0])
				icaavTodo[idMov]["ciudadDestino"] = self.regresaCiudadDestino(ruta)
				icaavTodo[idMov]["paisDestino"] = self.regresaPais(icaavTodo[idMov]["ciudadDestino"])

				##alcanceServ = line.split(',')[12]
	
				clase = line.split(',')[13]
				##print("Clase: " + clase)
				icaavTodo[idMov]['clase'] = clase
	
				lineaAerea = line.split(',')[14]
				##print("Linea Aerea: " + lineaAerea)
				icaavTodo[idMov]['lineaAerea'] = lineaAerea
				
				##tipoServ = line.split(',')[16]
	
				tarifMonNac = float(line.split(',')[17])
				##print("tarifMonNac: " + str(tarifMonNac))
				icaavTodo[idMov]['tarifMonNac'] = tarifMonNac
	
				porComision = float(line.split(',')[22])
				##print("porComision: " + str(porComision))
				icaavTodo[idMov]['porComision'] = porComision
				
				clases = line.split(',')[28].split('/')
				##print("clases: " + str(clases))
				icaavTodo[idMov]['clases'] = clases
				
				aerolineas = line.split(',')[29].split('/')
				##print("aerolineas: " + str(aerolineas))
				icaavTodo[idMov]['aerolineas'] = aerolineas
				
				##vuelos = line.split(',')[30].split('/')
	
				pnr = line.split(',')[31]
				##print("pnr: " + pnr)
				icaavTodo[idMov]['pnr'] = pnr
	
				codigoComp = line.split(',')[32]
				##print("codigoComp:_" + codigoComp + "_")
				if (codigoComp[:-1] != ""):
					icaavTodo[idMov]['codigoComp'] = True
				else:
					icaavTodo[idMov]['codigoComp'] = False
	
				idMov = idMov + 1
				##input("-----")
		except Exception as err:
			##print(numBoleto)
			self.wriErr.addMensaje("error", "Verifica en el boleto:" + numBoleto + " y la linea: " + linea + " o en el siguiente.")
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return icaavTodo
	
	##Return the configure comision
	def regresaComision(self, renglon):
		nameFunction = "regresaComision"
	
		try:
			res = "PendienteConf_" + renglon["lineaAerea"]
			strAux = renglon["idCliente"]+renglon["lineaAerea"]
			if(strAux in self.dicExcepciones):
				res=self.dicExcepciones[strAux]##[:-1]
			elif (renglon["lineaAerea"] + renglon["paisOrigen"] + renglon["paisDestino"] in self.dicExcepciones):
				res = self.dicExcepciones[renglon["lineaAerea"]+ renglon["paisOrigen"] + renglon["paisDestino"]]
			elif(renglon["lineaAerea"] + "***" + renglon["paisDestino"] in self.dicExcepciones):
				res=self.dicExcepciones[renglon["lineaAerea"] + "***" + renglon["paisDestino"]]
			elif (renglon["lineaAerea"] + renglon["paisOrigen"] + "***" in self.dicExcepciones):
				res = self.dicExcepciones[renglon["lineaAerea"] + renglon["paisOrigen"] + "***"]
			elif (renglon["lineaAerea"] in self.dicExcepciones):
				res = self.dicExcepciones[renglon["lineaAerea"]]  ##[:-1]

			##if(renglon["lineaAerea"] == "DL"):
				##print(renglon["lineaAerea"] + renglon["ciudadOrigen"] + renglon["ciudadDestino"])
				##input(res)
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return res
	
	##Returns what is the % given to an agency
	def revisaReglas(self, renglon):
		nameFunction = "revisaReglas"	
		try:
			res = "Pendiente"
			
			if(renglon["idCliente"]in self.dicExcepciones or renglon["serieFac"]=="NCE"):
				if(renglon["idCliente"]in self.dicExcepciones):
					res=self.dicExcepciones[renglon["idCliente"]]##[:-1]
				elif(renglon["serieFac"]=="NCE"):
					res="Excepcion_NCE"
			else:
				res = "Pendiente_" + renglon["lineaAerea"]
				if(renglon["lineaAerea"] == "AM"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						##if (renglon["interlineal"]):
							##input(renglon["dicAerolineas"])
						if(renglon["paisOrigen"] == "MEX" and renglon["paisDestino"] == "EUA"):
							if(renglon["dicAerolineas"] == {'AM': 'AM', 'DL': 'DL'} or renglon["dicAerolineas"] == {'AM': 'AM'}):
								res = self.regresaComision(renglon)
							else:
								res = "0%"
						else:
							if(renglon["interlineal"] == False and renglon["codigoComp"] == False  and "V" not in renglon["clases1"] and renglon["paisOrigen"] == "MEX" and renglon["paisDestino"] not in ["EUA","SinPaisAutomatico"]):
								res = self.regresaComision(renglon)
							if(renglon["interlineal"] == True): ##and renglon["paisOrigen"] == "MEX"):
								res = "0%"
							if (renglon["codigoComp"] == True):  ##and renglon["paisOrigen"] == "MEX"):
								##res = "0%"
								res = "Pendiente_CodigoCompartido_" + renglon["lineaAerea"]
							if("V" in renglon["clases1"]): ##and renglon["paisOrigen"] == "MEX"):
								res = "0%"
							if (renglon["paisOrigen"] in ["EUA", "CAN"] and renglon["paisDestino"] == "MEX"):
								res = "0%"
							else:
								if (renglon["paisOrigen"] == "EUA"):
									res = "0%"
								if (renglon["paisOrigen"] == "CAN"):
									res = "0%"
							##if ("MEX" not in renglon["dicPaises"]):
								##res = "0%"
				elif (renglon["lineaAerea"] == "GRANPD"):
					if (renglon["clases"] == ['']):
						res = "Pendiente_Manual"
					else:
						if (renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						else:
							res = "0%"
				elif(renglon["lineaAerea"] == "IJ1"):
					if("**" not in renglon["ruta1"]):
						res = self.regresaComision(renglon)
					else:
						res = "0%"
				elif(renglon["lineaAerea"] == "VW"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["interlineal"] == True and renglon["paisOrigen"] == "MEX" and renglon["dicAerolineas"]=={'VW': 'VW', 'AM': 'AM'}):  
							res = self.regresaComision(renglon)
						if (renglon["paisOrigen"] in ["EUA","CAN"] and renglon["paisDestino"] == "MEX"):
							res = self.regresaComision(renglon)
						else:
							if (renglon["paisOrigen"] == "EUA"):
								res = "0%"
							if (renglon["paisOrigen"] == "CAN"):
								res = "0%"
						##if("MEX" not in renglon["dicPaises"]):
							##res = "0%"
				elif(renglon["lineaAerea"] == "AA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "AS"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["interlineal"] == True):
							res = "0%"
						if(renglon["codigoComp"] == True):
							res = "0%"
						if (renglon["paisOrigen"] in ["EUA","CAN"] and renglon["paisDestino"] == "MEX"):
							res = "0%"
						else:
							if (renglon["paisOrigen"] == "EUA"):
								res = "0%"
							if (renglon["paisOrigen"] == "CAN"):
								res = "0%"
						##if("MEX" not in renglon["dicPaises"]):
							##res = "0%"
				elif(renglon["lineaAerea"] == "UA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["codigoComp"] == True):
							res = "Pendiente_CodigoCompartido_" + renglon["lineaAerea"]
						if(renglon["paisOrigen"] == "MEX" and renglon["paisDestino"] in ["EUA","CAN"]):
							res = self.regresaComision(renglon)
						if (renglon["interlineal"] == True):
								res = "0%"
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
						'''
						if("T" in renglon["clases1"]):
							res = "0%"
						if("L" in renglon["clases1"]):
							res = "0%"
						if("K" in renglon["clases1"]):
							res = "0%"
						if("R" in renglon["clases1"]):
							res = "0%"
						'''
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "DL"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["paisOrigen"] == "MEX" and renglon["paisDestino"] == "EUA"):
							if(renglon["dicAerolineas"] == {'AM': 'AM', 'DL': 'DL'} or renglon["dicAerolineas"] == {'DL': 'DL'}):
								res = self.regresaComision(renglon)
							else:
								res = "0%"
						elif(renglon["paisOrigen"] == "MEX" and renglon["paisDestino"] == "CAN" and renglon["interlineal"] == False and "E" in renglon["clases1"]):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
						##if ("MEX" not in renglon["dicPaises"]):
							##res = "0%"
				elif (renglon["lineaAerea"] == "AF" or renglon["lineaAerea"] == "KL"):
					if (renglon["clases"] == ['']):
						res = "Pendiente_Manual"
					else:
						if (renglon["paisOrigen"] == "MEX" and renglon["interlineal"] == False):
							res = self.regresaComision(renglon)
						if (renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if (renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "AZ"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["paisOrigen"] == "MEX" ):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "AC"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "CM"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == True):
							res = "0%"
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "LA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "JJ"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "AV"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						'''
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						'''
						if (renglon["interlineal"] == True):
							res = "0%"
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "LRNADA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "TANADA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "BA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "IB"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						## if(renglon["interlineal"] == True and renglon["paisOrigen"] == "MEX"):
							## res = self.regresaComision(renglon)
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
						## if("P" in renglon["clases1"]):
							## res = "0%"
				elif(renglon["lineaAerea"] == "UX"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["ruta"][0] == "CUN"):
							 res = self.regresaComision(renglon)
						## if((renglon["ruta"][0] == "MIA" or renglon["ruta"][0] == "JFK" or renglon["ruta"][0] == "BOS" ) and renglon["paisDestino"] == "MEX"):
							## res = self.regresaComision(renglon)
						if(renglon["interlineal"] == True):
							res = "0%"
						if(renglon["codigoComp"] == True):
							res = "0%"
				elif(renglon["lineaAerea"] == "LH"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == False and renglon["codigoComp"] == False and renglon["paisOrigen"] == "MEX"):
							res = self.regresaComision(renglon)
						if(renglon["codigoComp"] == True):
							res = "Pendiente_CodigoCompartido_" + renglon["lineaAerea"]
						if(renglon["paisOrigen"] == "EUA"):
							res = "0%"
						if(renglon["paisOrigen"] == "CAN"):
							res = "0%"
				elif(renglon["lineaAerea"] == "NZ"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					'''
					else:	
						if(renglon["codigoComp"] == True):
							res = "0%"
						elif(renglon["paisOrigen"] in ["MEX","EUA","CAN"] and renglon["ruta"][0] == "LAX" and renglon["interlineal"] == False):
							res = "0%"
							if("C" in renglon["clases1"]):
								res = "7%"
							if("D" in renglon["clases1"]):
								res = "7%"
							if("Z" in renglon["clases1"]):
								res = "7%"
							if("J" in renglon["clases1"]):
								res = "7%"
							if("U" in renglon["clases1"]):
								res = "7%"
							if("O" in renglon["clases1"]):
								res = "7%"
							if("A" in renglon["clases1"]):
								res = "7%"
							if("Y" in renglon["clases1"]):
								res = "5%"
							if("B" in renglon["clases1"]):
								res = "5%"
							if("M" in renglon["clases1"]):
								res = "5%"
							if("H" in renglon["clases1"]):
								res = "5%"
							if("Q" in renglon["clases1"]):
								res = "5%"
							if("V" in renglon["clases1"]):
								res = "5%"
							if("W" in renglon["clases1"]):
								res = "5%"
							if("T" in renglon["clases1"]):
								res = "5%"
							if("L" in renglon["clases1"]):
								res = "5%"
							if("S" in renglon["clases1"]):
								res = "5%"
						'''
				elif(renglon["lineaAerea"] == "JL"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["codigoComp"] == True):
							res = "0%"
						## if(renglon["paisOrigen"] in ["MEX","CAN"]):
							## res = "0%"
						if(renglon["paisOrigen"] == "EUA"):
							res = self.regresaComision(renglon)
				elif(renglon["lineaAerea"] == "KE"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == True):
							res = "0%"
						## elif(renglon["paisOrigen"] in ["MEX","EUA","CAN"] and len(renglon["clases1"]) == 1 and renglon["codigoComp"] == False):
							## res = self.regresaComision(renglon)
						elif(renglon["paisOrigen"] in ["MEX","EUA","CAN"] and len(renglon["clases1"]) != 1):
							res = "0%"			
				elif(renglon["lineaAerea"] == "CA"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["codigoComp"] == True):
							res = "0%"
						## elif(renglon["paisOrigen"] in ["MEX","CAN"]):
							## res = "0%"
						'''
						elif(renglon["paisOrigen"] == "EUA"):
							res = "0%"
							if("F" in renglon["clases1"]):
								res = "8%"
							if("A" in renglon["clases1"]):
								res = "8%"
							if("C" in renglon["clases1"]):
								res = "8%"
							if("D" in renglon["clases1"]):
								res = "8%"
							if("Z" in renglon["clases1"]):
								res = "8%"
							if("J" in renglon["clases1"]):
								res = "8%"
							if("W" in renglon["clases1"]):
								res = "8%"
							if("Y" in renglon["clases1"]):
								res = "5%"
							if("B" in renglon["clases1"]):
								res = "5%"
							if("M" in renglon["clases1"]):
								res = "5%"
							if("H" in renglon["clases1"]):
								res = "5%"
							if("K" in renglon["clases1"]):
								res = "5%"
							if("L" in renglon["clases1"]):
								res = "5%"
							if("Q" in renglon["clases1"]):
								res = "5%"
							if("G" in renglon["clases1"]):
								res = "5%"
							if("V" in renglon["clases1"]):
								res = "5%"
							if("U" in renglon["clases1"]):
								res = "5%"
					'''
				elif(renglon["lineaAerea"] == "CX"):
					if(renglon["clases"]==['']):
						res = "Pendiente_Manual"
					else:
						if(renglon["interlineal"] == True):
							res = "0%"
						'''
						elif(renglon["paisOrigen"] in ["EUA"] and renglon["codigoComp"] == False):
							if("J" in renglon["clases1"]):
								res = "11%"
							if("C" in renglon["clases1"]):
								res = "11%"
							if("D" in renglon["clases1"]):
								res = "11%"
							if("Y" in renglon["clases1"]):
								res = "11%"
							if("W" in renglon["clases1"]):
								res = "6%"
							if("H" in renglon["clases1"]):
								res = "6%"
							if("B" in renglon["clases1"]):
								res = "6%"
							if("F" in renglon["clases1"]):
								res = "3%"
							if("A" in renglon["clases1"]):
								res = "3%"
							if("I" in renglon["clases1"]):
								res = "3%"
							if("R" in renglon["clases1"]):
								res = "3%"
							if("E" in renglon["clases1"]):
								res = "3%"
							if("K" in renglon["clases1"]):
								res = "3%"
							if("M" in renglon["clases1"]):
								res = "3%"
							if("L" in renglon["clases1"]):
								res = "3%"
							if("V" in renglon["clases1"]):
								res = "3%"
							if("S" in renglon["clases1"]):
								res = "3%"
							if("N" in renglon["clases1"]):
								res = "3%"
							'''
				elif(renglon["lineaAerea"] == "COMPTHOTEL" and renglon["ruta"][0].replace(" ", "") == "TRASLADO"):
					renglon["lineaAerea"] = "COMPTTRASL"
					res = self.regresaComision(renglon)
				else:
					res = self.regresaComision(renglon)
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return res
	
	##Reads IATA codes from csv files
	def readIATACodes(self):
		nameFunction = "readIATACodes"
		
		try:
			##self.dicMEX = ["MEX", "REX", "GDL"]
			##self.dicEUA = ["LAX"]
			##self.dicCAN = []

			self.dicMEX = []
			self.dicEUA = []
			self.dicCAN = []
	
			src= self.directorio + "CodIATAMex.csv"
			try:
				file1 = open(src, "r",encoding="utf8",errors='ignore')
			except Exception as err:
				self.wriErr.addMensaje("error", "El archivo " + src  + " no existe.")
				WriteLog.writeLog(nameFunction, "El archivo " + src  + " no existe.")
	
			for line in file1:
				self.dicMEX.append(line.split(',')[0])
	
			src= self.directorio + "CodIATAEua.csv"
			try:
				file1 = open(src, "r",encoding="utf8",errors='ignore')
			except Exception as err:
				self.wriErr.addMensaje("error", "El archivo " + src  + " no existe.")
				WriteLog.writeLog(nameFunction, "El archivo " + src  + " no existe.")
	
			for line in file1:
				self.dicEUA.append(line.split(',')[0])
	
			src= self.directorio + "CodIATACan.csv"
			try:
				file1 = open(src, "r",encoding="utf8",errors='ignore')
			except Exception as err:
				self.wriErr.addMensaje("error", "El archivo " + src  + " no existe.")
				WriteLog.writeLog(nameFunction, "El archivo " + src  + " no existe.")
	
			for line in file1:
				self.dicCAN.append(line.split(',')[0])
			
			
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return
	
	##Reads excepciones codes from csv files
	def readExcepciones(self):
		nameFunction = "readExcepciones"

		try:
			##self.dicExcepciones = []
			self.dicExcepciones = {}
			
			src= self.directorio + "CodClienteAeroCom.csv"
			try:
				file1 = open(src, "r",encoding="utf8",errors='ignore')
			except Exception as err:
				self.wriErr.addMensaje("error", "El archivo " + src  + " no existe.")
				WriteLog.writeLog(nameFunction, "El archivo " + src  + " no existe.")
	
			for line in file1:
				idCliente = line.split(',')[0].zfill(6)
				if(idCliente != "000000"):
					self.dicExcepciones[idCliente+line.split(',')[1]] = line.split(',')[2]
				else:
					self.dicExcepciones[line.split(',')[1]] = line.split(',')[2]
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return

	##Returns destination city
	def regresaCiudadDestino(self, ruta):
		nameFunction = "regresaCiudadDestino"
		try:
			ciudad = "SinCiudadAutomatica"
			tamRuta = len(ruta)
			if(tamRuta == 2):
				ciudad = ruta[1]
			if(tamRuta == 3 and ruta[0]==ruta[2]):
				ciudad = ruta[1]
			if (tamRuta == 5 and ruta[0] == ruta[4] and ruta[1] == ruta[3]):
				ciudad = ruta[2]
			if (tamRuta == 7 and ruta[0] == ruta[6] and ruta[1] == ruta[5] and ruta[2] == ruta[4]):
				ciudad = ruta[3]
			if (tamRuta == 9 and ruta[0] == ruta[8] and ruta[1] == ruta[7] and ruta[2] == ruta[6] and ruta[3] == ruta[5]):
				ciudad = ruta[4]
			##print(ruta)
			##input(ciudad)
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return ciudad

	##Returns country of city
	def regresaPais(self, ciudad):
		nameFunction = "regresaPais"	
		try:
			pais = "OTRO"
			if(ciudad == ""):
				pais = "OTRO"
			elif(ciudad == "SinCiudadAutomatica"):
				pais = "SinPaisAutomatico"
			elif(ciudad in self.dicMEX):
				pais = "MEX"
			elif(ciudad in self.dicEUA):
				pais = "EUA"
			elif(ciudad in self.dicCAN):
				pais = "CAN"
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err)
		return pais
	
	###Creates report for the correponding porcentage of comisiones
	def createReportPorComisiones(self):
		nameFunction = "createReportPorComisiones"	
		try:
			fileName = ""

			icaavTodo = self.readCsvIcaav()

			fileName = "ReporteComisiones" + self.semana + ".csv"
			dst = self.directorio + fileName
			if not os.path.exists(os.path.dirname(dst)):
				os.makedirs(os.path.dirname(dst))
	
			with open(dst, 'w') as csv_file:
				### Titulos CSV
				csv_file.write("CLAVE CLIENTE" + ",")
				csv_file.write("CLIENTE" + ",")
				csv_file.write("BOLETO" + ",")
				csv_file.write("SERIE" + ",")
				csv_file.write("FACTURA" + ",")
				csv_file.write("FECHA" + ",")
				csv_file.write("PASAJERO" + ",")
				csv_file.write("AEROLINEA" + ",")
				csv_file.write("AEROLINEAS" + ",")
				csv_file.write("INTERLINEAL" + ",")
				csv_file.write("PAIS ORIGEN" + ",")
				csv_file.write("CIUDAD ORIGEN" + ",")
				csv_file.write("PAIS DESTINO" + ",")
				csv_file.write("CIUDAD DESTINO" + ",")
				csv_file.write("PASA POR MEXICO" + ",")
				csv_file.write("CODIGO COMPARTDO" + ",")
				csv_file.write("CLASES" + ",")
				csv_file.write("TARIFA BASE" + ",")
				csv_file.write("PORCENTAJE COMISION BSP" + ",")
				csv_file.write("COMISION BSP" + ",")
				csv_file.write("% COMISION" + ",")
				csv_file.write("COMISION" + ",")
				csv_file.write("IVA COMISION" + ",")
				csv_file.write("TOTAL" + ",")
				csv_file.write("\n")
	
				### Contenido CSV
				for idMov in icaavTodo:
					##print(icaavTodo[idMov]["numBoleto"])
					csv_file.write(icaavTodo[idMov]["idCliente"] + ",")
					csv_file.write(icaavTodo[idMov]["cliente"] + ",")
					csv_file.write(icaavTodo[idMov]["numBoleto"] + ",")
					csv_file.write(icaavTodo[idMov]["serieFac"] + ",")
					csv_file.write(icaavTodo[idMov]["numFac"] + ",")
					csv_file.write(icaavTodo[idMov]["fecha"] + ",")
					csv_file.write(icaavTodo[idMov]["pasajero"] + ",")
					csv_file.write(icaavTodo[idMov]["lineaAerea"] + ",")
	
					##csv_file.write("INTERLINEAL" + ",")
					dicAux = {}
					strAux = ""
					for al in icaavTodo[idMov]["aerolineas"]:
						  dicAux[al] = al
						  strAux = strAux + al + "-"
					csv_file.write(strAux[:-1] + ",")
					icaavTodo[idMov]["dicAerolineas"] = dicAux
					if(len(dicAux) > 1):
						csv_file.write("True" + ",")
						icaavTodo[idMov]["interlineal"] = True
					elif icaavTodo[idMov]["lineaAerea"] not in dicAux:
						csv_file.write("True" + ",")
						icaavTodo[idMov]["interlineal"] = True
					else:
						csv_file.write("False" + ",")
						icaavTodo[idMov]["interlineal"] = False
					csv_file.write(icaavTodo[idMov]["paisOrigen"] + ",")
					csv_file.write(icaavTodo[idMov]["ruta"][0] + ",")

					csv_file.write(icaavTodo[idMov]["paisDestino"] + ",")
					csv_file.write(icaavTodo[idMov]["ciudadDestino"] + ",")
					
					##csv_file.write("PASA POR MEXICO" + ",")
					dicAux = {}
					strAux = ""
					for aer in icaavTodo[idMov]["ruta"]:
						  dicAux[aer] = aer
						  strAux = strAux + aer + "/"
					csv_file.write(strAux[:-1] + ",")
					icaavTodo[idMov]["ruta1"] = strAux
					##csv_file.write(str(icaavTodo[idMov]["ruta"]) + ",")
					##csv_file.write(",")
					
					csv_file.write(str(icaavTodo[idMov]["codigoComp"]) + ",")
	
					dicAux = {}
					strAux = ""
					for cla in icaavTodo[idMov]["clases"]:
						  dicAux[cla] = cla
						  strAux = strAux + cla + "-"
					icaavTodo[idMov]["clases1"] = dicAux
					csv_file.write(strAux[:-1] + ",")
	
					csv_file.write(str(icaavTodo[idMov]["tarifMonNac"])  + ",")
					csv_file.write(str(icaavTodo[idMov]["porComision"])  + ",")
					csv_file.write(str(icaavTodo[idMov]["tarifMonNac"] * icaavTodo[idMov]["porComision"])  + ",")

					icaavTodo[idMov]["porAgencia"] = self.revisaReglas(icaavTodo[idMov])
					csv_file.write(icaavTodo[idMov]["porAgencia"] + ",")
					try:
						porAgencia = float(icaavTodo[idMov]["porAgencia"][:-1])
						montAgencia = icaavTodo[idMov]["tarifMonNac"] * porAgencia * .01
						csv_file.write("{:.2f}".format(montAgencia) + ",")
						csv_file.write("{:.2f}".format(montAgencia * .16) + ",")
						csv_file.write("{:.2f}".format(montAgencia * 1.16) + ",")
					except Exception as err:
						csv_file.write("N/A" + ",")
						csv_file.write("N/A" + ",")
						csv_file.write("N/A" + ",")
					csv_file.write("\n")
		except Exception as err:
			self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
			WriteLog.writeLog(nameFunction, err )
		return fileName

	###Main
	def main():
		nameFunction = "main"
		try:
			###getConfiguration()
			
			###WriteLog.writeStatusRename("START")
	
			readIATACodes()
			readExcepciones()
			icaavTodo = readCsvIcaav()
			createReportPorComisiones(icaavTodo)
	
			print("Gracias por la espera, tus reportes estan listos.")
				
			###WriteLog.writeStatusRename("END")
			
		except Exception as err:
			WriteLog.writeLog(nameFunction, err)
		return
	
	if __name__ == "__main__": main()
