### Escribe archivos LOG
from ClasesGenericas import WriteLog, WriteErrors
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os
import time
import warnings

warnings.filterwarnings("ignore")

class ConciliadorSAT:

    def __init__(self, agnc, rutaArch, mss,ano):
        nameFunction = "setInfoParametros2"
        try:
            ### Global Variables
            self.wriErr = WriteErrors.WriteErrors()  ##.mensajesErr = {}
            self.reporteType = "DiariosSATIcaav"
            self.diariosTodo = {}
            self.fecha = time.strftime("%y%m%d%H%M")
            self.i = 0

            ### Configuration Variables
            self.agencia = agnc ##"VK" or "Contravel"
            self.directorio = rutaArch ##"./Reportes" + self.agencia + "/"
            self.meses = mss
            self.ano = ano
        except Exception as err:
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

    ###Recorre Resultado Corto Cargo Abonos
    def recorreResDiariosSATIcaav(self):
        nameFunction = "recorreRes" + self.reporteType

        try:
            dst = self.directorio + self.agencia + "/" + self.agencia[0:3] + "-" + self.ano + "-" + ''.join(str(e) for e in self.meses) + "-" + self.fecha + ".csv"
            print("voy a empezar csv")

            if not os.path.exists(os.path.dirname(dst)):
                os.makedirs(os.path.dirname(dst))
            with open(dst, 'w') as csv_file:
                ### Titulos CSV

                csv_file.write("UUID" + ",")
                csv_file.write("Cuenta" + ",")
                csv_file.write("Poliza" + ",")
                csv_file.write("Sucursal" + ",")
                csv_file.write("Factura Diario" + ",")
                csv_file.write("referencia" + ",")
                csv_file.write("ref Descripcion" + ",")

                csv_file.write("RFC E" + ",")
                csv_file.write("RAZON S E" + ",")
                csv_file.write("RFC R" + ",")
                csv_file.write("RAZON S R" + ",")
                csv_file.write("statusSAT" + ",")
                csv_file.write("Factura SAT" + ",")
                csv_file.write("Concepto SAT" + ",")
                csv_file.write("subtotalSAT" + ",")
                csv_file.write("ivaSAT" + ",")
                csv_file.write("NumCtaPagoSAT" + ",")
                csv_file.write("Fecha ICAAV" + ",")
                csv_file.write("Fecha SAT" + ",")
                csv_file.write("Monto ICAAV" + ",")
                csv_file.write("Monto SAT" + ",")
                csv_file.write("Status" + ",")
                csv_file.write("\n")

                ### Contenido CSV
                ##for i in range(mini, maxi):
                ##print(i)
                for clave in sorted(self.diariosTodo.keys()):
                    renglon = self.diariosTodo[clave]
                    if(renglon["status"] != "renglon erroneo" ): ##and cuentaDiario[0:7] in ["1150003","1150010","1150011"] or cuentaDiario[0] in ["5","6"]):):
                        ##print(clave)
                        ##csv_file.write("\n")
                        csv_file.write(clave + ",")
                        csv_file.write(renglon["cuentaDiario"] + ",")
                        csv_file.write(renglon["polizaDiario"] + ",")
                        csv_file.write(renglon["sucursalDiario"] + ",")
                        csv_file.write(renglon["docDiario"] + ",")
                        csv_file.write(renglon["referenciaDiario"] + ",")
                        csv_file.write(renglon["referenciaDescripcionDiario"] + ",")
                        csv_file.write(renglon["rfcEmisorSAT"] + ",")
                        csv_file.write(renglon["razonSocialEmisorSAT"] + ",")
                        csv_file.write(renglon["rfcReceptorSAT"] + ",")
                        csv_file.write(renglon["razonSocialReceptorSAT"] + ",")
                        csv_file.write(renglon["statusSAT"] + ",")
                        csv_file.write(renglon["facturaInterna"] + ",")
                        csv_file.write(renglon["conceptoSAT"] + ",")
                        csv_file.write(renglon["subtotalSAT"] + ",")
                        csv_file.write(renglon["ivaSAT"] + ",")
                        csv_file.write(renglon["NumCtaPagoSAT"] + ",")
                        csv_file.write(renglon["datosPolizaFechaDiario"] + ",")
                        csv_file.write(renglon["fechaSAT"] + ",")
                        csv_file.write(str(renglon["montoDiario"]) + ",")
                        csv_file.write(str(renglon["montoSAT"]) + ",")
                        diferencia = abs(abs(renglon["montoDiario"])-renglon["montoSAT"])
                        if("SOLO" not in renglon["status"] and "SIN XML" not in renglon["status"] and "Cancel" not in renglon["status"] and diferencia >.01):
                            if(diferencia >1):
                                self.diariosTodo[clave]["status"] = "MONTOS," + str(diferencia)
                            else:
                                self.diariosTodo[clave]["status"] = "OK2" ##+ str(diferencia)
                        elif("Cancel" not in renglon["status"] and "SIN XML" not in renglon["status"] and diferencia <=.01):
                            self.diariosTodo[clave]["status"] = "OK1"
                        elif("CanceladaSAT" in renglon["status"] and renglon["montoDiario"] != 0):
                            self.diariosTodo[clave]["status"] = "CanceladaSAT y no en ICAAV"
                        elif("Cancelado" in renglon["status"] and "Vigente" in renglon["statusSAT"]):
                            self.diariosTodo[clave]["status"] = "Cancelado y vigente en SAT"
                        elif("SIN XML" in renglon["status"] and "COMISIONES" in renglon["referenciaDiario"] ):
                            self.diariosTodo[clave]["status"] = "COMISIONES SIN XML"
                        csv_file.write(self.diariosTodo[clave]["status"] + ",")
                        csv_file.write("\n")
                    else:
                        csv_file.write("renglon erroneo," + clave.replace(",","-")[:-1] + ",,,,,,,,,,,,,,,,,error")
                        csv_file.write("\n")

        except Exception as err:
            print(renglon)
            self.wriErr.addMensaje("info", "Renglon:" + renglon)
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return dst

    def datosDiario(self, clave, cuentaDiario, polizaDiario, montoDiario, datosPolizaFechaDiario, sucursalDiario,
                    docDiario, referenciaDiario, referenciaDescripcionDiario):
        nameFunction = "datosDiarioVacios"

        try:
            self.diariosTodo[clave]["cuentaDiario"] = cuentaDiario
            self.diariosTodo[clave]["polizaDiario"] = polizaDiario
            self.diariosTodo[clave]["montoDiario"] = montoDiario
            self.diariosTodo[clave]["datosPolizaFechaDiario"] = datosPolizaFechaDiario
            self.diariosTodo[clave]["sucursalDiario"] = sucursalDiario
            self.diariosTodo[clave]["docDiario"] = docDiario
            self.diariosTodo[clave]["referenciaDiario"] = referenciaDiario
            self.diariosTodo[clave]["referenciaDescripcionDiario"] = referenciaDescripcionDiario
        except Exception as err:
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return

    ###Extracts Info to be analized
    def extractInfoDiarios(self):
        nameFunction = "extractInfoDiarios"

        try:

            for mes in self.meses:
                srcDiarios = self.directorio + self.ano + "-" + str(mes).zfill(2) + "/Diarios" + self.agencia + ".csv"
                try:
                    file = open(srcDiarios, "r", encoding="utf8", errors='ignore')
                except Exception as err:
                    print("El archivo " + srcDiarios + " no existe.")
                    self.wriErr.addMensaje("error", "El archivo " + srcDiarios + " no existe.")
                    break
                print("Voy a empezar a leer Diarios")
                ##WriteLog.writeLog("info", "empece a leer diarios")

                self.diariosTodo = {}
                idMov = 0
                for line in file:
                    ##input(line)
                    ##input(line.split(',')[1])
                    if (line.split(',')[1] != "datos_poliza_anio" and line[0:3] != ",,,"):
                        ##print(line)
                        UUIDDiario = line.split(',')[32].strip().upper()  ##[:-1]
                        cuentaDiario = line.split(',')[16]
                        referenciaDiario = line.split(',')[17]
                        referenciaDescripcionDiario = line.split(',')[18]
                        mesDiario = int(line.split(',')[2])
                        polizaIDDiario = line.split(',')[3]
                        polizaDiario =  line.split(',')[3] + line.split(',')[4] + ":" +  line.split(',')[2]
                        detallePolizaDiario = line.split(',')[18]
                        cargoDiario = float(line.split(',')[20])
                        abonoDiario = -1 * float(line.split(',')[21])
                        montoDiario = cargoDiario + abonoDiario
                        datosPolizaFechaDiario = line.split(',')[5]
                        sucursalDiario = line.split(',')[31]
                        docDiario = line.split(',')[23] + " "
                        numeroDocDiario = line.split(',')[24]
                        ##clave = poliza + "-" + datosPolizaFecha + "-" + str(monto)
                        clave = UUIDDiario
                        if(clave == ""):
                            clave= line.split(',')[16] + "(" + polizaDiario + "-" + line.split(',')[15] + ")[" + numeroDocDiario + "]"

                        ##input(cuentaDiario[0:7])
                        ##TODAS LAS 2, 1120, 4, 12, 13
                        ##if (cuentaDiario[0:7] in ["1150003","1150010","1150011"] or cuentaDiario[0] in ["5","6"]):
                        ##and cuentaDiario[0:7] not in ["1150010","1150011"]
                        if( mesDiario in self.meses
                            and
                            cuentaDiario[0] not in ["4"]
                            and
                                (cuentaDiario[0] not in ["2"]
                            or
                                #"2203002000","2203020000","2203021000","2202015000","2202016000","2202011000","2202004000","2202008002"
                            cuentaDiario[0:10] in ["2202005000","2202003000","2202014000","2202011000","2201007001","2202020006"]
                            or
                            (cuentaDiario[0:10] in ["2202020001","2202020002","2202020003","2202020004","2202020005","2202020007","2202020009","2202020010","2202020011","2202020100"] and abonoDiario != 0)
                                ##SON de contravel "2202020001","2202020002","2202020003","2202020004","2202020005","2202020006","2202020007","2202020009","2202020010","2202020100"
                            or
                            (cuentaDiario[0:7] in ["2203002", "2203021","2203020","2202015","2201014","2202004"] and abonoDiario != 0)
                            or
                            (cuentaDiario[0:7] in ["2202016"] and cargoDiario != 0)
                            or
                            (cuentaDiario[0:10] in ["2202008002"] and abonoDiario != 0)
                            )
                           and (cuentaDiario[0:7] not in ["5204001","5204002","5204004","6001012","6001903","5203007","6001998","1110002","6001413","5102006","5101007","5101010","5101004"]
                                or
                               (cuentaDiario[0:7] in ["5202008","5202001","5204003","5202108","5202104","5202105","5202113"] and cargoDiario != 0) ##Contravel
                                )
                           and cuentaDiario[0:10] not in ["1121001002"]
                           and (cuentaDiario[0:4] not in ["1120","1140"]
                                or
                                (cuentaDiario[0:7] in ["1145003"] and cargoDiario != 0)
                                )
                           and(not(cuentaDiario[0:4] in ["1130"] and polizaIDDiario in ["PE","CH"]))
                                 ##CONTRAVEL
                           ##and (cuentaDiario[0:2] not in ["11"]
                                ##or
                                ##(cuentaDiario[0:4] in ["1130"] and polizaIDDiario != "PE")) ##CONTRAVEL
                           and (cuentaDiario[0:2] not in ["12", "13"] or cuentaDiario[0:7] in ["1210001","1220001","1230001","1215001"])
                           and (polizaIDDiario != "PI" or (polizaIDDiario == "PI" and cuentaDiario[0:4] in ["5203"]))
                           and docDiario != "NCE "
                           and docDiario != "NCE3 "
                           and docDiario[0] not in ["D"]):
                            ##if(clave == "dc1b3855-52f7-494f-baea-061c08fa443b"):
                                ##print("entre" + line)
                                ##if(clave in self.diariosTodo and "montoDiario" in self.diariosTodo[clave]):
                                    ##input("hola" + str(self.diariosTodo[clave]["montoDiario"]))
                            if (clave not in self.diariosTodo):
                                ##self.i = self.i + 1
                                self.diariosTodo[clave] = {}
                            else:
                                if(polizaIDDiario == "PD" or polizaIDDiario == "PE" or polizaIDDiario == "CH" or polizaIDDiario == "PI"):
                                    montoDiario = cargoDiario + abonoDiario + self.diariosTodo[clave]["montoDiario"]
                                    cuentaDiario = cuentaDiario + "-" + self.diariosTodo[clave]["cuentaDiario"]
                                    polizaDiario = polizaDiario + "-" + self.diariosTodo[clave]["polizaDiario"]
                                else:
                                    clave = clave + str(idMov)
                                    self.diariosTodo[clave] = {}
                                    self.diariosTodo[clave]["status"] = "repetida1"
                                    idMov = idMov + 1
                            if("DOCUMENTO CANCELADO" in detallePolizaDiario):
                                self.diariosTodo[clave]["status"] = "Cancelado"
                                montoDiario = 0
                            else:
                                if("[" in clave):
                                    self.diariosTodo[clave]["status"] = "SIN XML EN DIARIO"
                                else:
                                    self.diariosTodo[clave]["status"] = "SOLO EN DIARIO"

                            self.datosDiario(clave, cuentaDiario, polizaDiario, montoDiario, datosPolizaFechaDiario,sucursalDiario,docDiario, referenciaDiario, referenciaDescripcionDiario)
                            self.datosSAT(clave, "", "", "", "","", "", "", "", "", "","",0)

                file.close()
                ##WriteLog.writeLog("info", "me quede en: " + line)
        except Exception as err:
            print("error")
            print(line)
            self.wriErr.addMensaje("info", "Renglon:" + line)
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return


    def datosSAT(self, clave,rfcEmisorSAT,razonSocialEmisorSAT,rfcReceptorSAT,razonSocialReceptorSAT,statusSAT,conceptoSAT,facturaInterna,subtotalSAT,ivaSAT,NumCtaPagoSAT,fechaSAT,montoSAT):
        nameFunction = "datosSAT"

        try:
            self.diariosTodo[clave]["rfcEmisorSAT"] = rfcEmisorSAT
            self.diariosTodo[clave]["razonSocialEmisorSAT"] = razonSocialEmisorSAT
            self.diariosTodo[clave]["rfcReceptorSAT"] = rfcReceptorSAT
            self.diariosTodo[clave]["razonSocialReceptorSAT"] = razonSocialReceptorSAT
            self.diariosTodo[clave]["statusSAT"] = statusSAT
            self.diariosTodo[clave]["conceptoSAT"] = conceptoSAT
            self.diariosTodo[clave]["facturaInterna"] = facturaInterna
            self.diariosTodo[clave]["subtotalSAT"] = subtotalSAT
            self.diariosTodo[clave]["ivaSAT"] = ivaSAT
            self.diariosTodo[clave]["NumCtaPagoSAT"] = NumCtaPagoSAT
            self.diariosTodo[clave]["fechaSAT"] = fechaSAT
            self.diariosTodo[clave]["montoSAT"] = montoSAT
        except Exception as err:
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return

    def agregarSatDicc(self, clave,rfcEmisorSAT,razonSocialEmisorSAT,rfcReceptorSAT,razonSocialReceptorSAT,statusSAT,conceptoSAT,facturaInterna,subtotalSAT,ivaSAT,NumCtaPagoSAT,fechaSAT,montoSAT,idMov):
        nameFunction = "agregarSatDicc"

        try:
            if (int(fechaSAT[3:5]) in self.meses):
                if (clave not in self.diariosTodo):
                    ##print("aqui")
                    self.diariosTodo[clave] = {}
                    self.datosDiario(clave, "", "", 0, "", "", "", "", "")
                    self.diariosTodo[clave]["status"] = "SOLO EN SAT"
                else:
                    if (self.diariosTodo[clave]["rfcEmisorSAT"] != ""):
                        ##print("aqui1")
                        clave = clave + "A" + str(idMov)
                        self.diariosTodo[clave] = {}
                        self.datosDiario(clave, "", "", 0, "", "", "", "", "")
                        self.diariosTodo[clave]["status"] = "repetida"
                        idMov = idMov + 1
                    elif ("Cancel" not in self.diariosTodo[clave]["status"]):
                        ##print("aqui2")
                        self.diariosTodo[clave]["status"] = "OK1"
                self.datosSAT(clave, rfcEmisorSAT, razonSocialEmisorSAT, rfcReceptorSAT, razonSocialReceptorSAT,
                              statusSAT, conceptoSAT, facturaInterna, subtotalSAT, ivaSAT, NumCtaPagoSAT, fechaSAT,
                              montoSAT)
                if (statusSAT != "Cancelado"):
                    ##print("aqui4-" + clave)
                    self.diariosTodo[clave]["montoSAT"] = montoSAT
                else:
                    ##print("aqui5")
                    self.diariosTodo[clave]["montoSAT"] = 0
                    self.diariosTodo[clave]["status"] = "CanceladaSAT"
        except Exception as err:
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return idMov


    ###Extracts Info to be analized
    def extractInfoSAT(self):
        nameFunction = "extractInfoSAT"

        try:
            for mes in self.meses:
                srcSAT = self.directorio + self.ano + "-" + str(mes).zfill(2) + "/SAT " + self.agencia  + ".csv"
                try:
                    file1 = open(srcSAT, "r", encoding="utf8", errors='ignore')
                except Exception as err:
                    print("El archivo " + srcSAT + " no existe.")
                    self.wriErr.addMensaje("error", "El archivo " + srcSAT + " no existe.")
                    break
                print("Voy a empezar a leer SAT")

                idMov = 0
                for line in file1:
                    ##print(line)
                    if (line[0:3] != ",,," and line.count(",")>50 and line.split(',')[1] != "Estado SAT"):
                        ##input(line)
                        UUIDSAT = line.split(',')[10].strip().upper()  ##[:-1]
                        statusSAT = line.split(',')[1]
                        rfcEmisorSAT = line.split(',')[12]
                        razonSocialEmisorSAT = line.split(',')[13]
                        rfcReceptorSAT = line.split(',')[15]
                        razonSocialReceptorSAT = line.split(',')[16]
                        montoSAT = float(line.split(',')[27])
                        fechaSAT = line.split(',')[4]
                        facturaInterna = line.split(',')[8] + line.split(',')[9]
                        conceptoSAT = line.split(',')[40]
                        subtotalSAT = line.split(',')[20]
                        ivaSAT = line.split(',')[23]
                        NumCtaPagoSAT = line.split(',')[38]
                        ##clave = poliza + "-" + datosPolizaFecha + "-" + str(monto)
                        clave = UUIDSAT
                        idMov = self.agregarSatDicc(clave, rfcEmisorSAT, razonSocialEmisorSAT, rfcReceptorSAT,
                                                    razonSocialReceptorSAT, statusSAT, conceptoSAT, facturaInterna,
                                                    subtotalSAT, ivaSAT, NumCtaPagoSAT, fechaSAT, montoSAT, idMov)
                    else:
                        if (line.count(",") > 3 and line[0:3] != ",,," and line.split(',')[1] != "Estado SAT"):
                            self.diariosTodo[line] = {}
                            self.diariosTodo[line]["status"] = "renglon erroneo"

                file1.close()
        ##print( self.diariosTodo)

        except Exception as err:
            print(line)
            self.wriErr.addMensaje("info", "Renglon:" + line)
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return

        ###Extracts Info to be analized
    def extractInfoNomina(self):
        nameFunction = "extractInfoNomina"

        try:

            for mes in self.meses:
                srcNomina = self.directorio + self.ano + "-" + str(mes).zfill(2) + "/Nomina " + self.agencia + ".csv"
                try:
                    file = open(srcNomina, "r", encoding="utf8", errors='ignore')
                except Exception as err:
                    print("El archivo " + srcNomina + " no existe.")
                    self.wriErr.addMensaje("error", "El archivo " + srcNomina + " no existe.")
                    break
                print("Voy a empezar a leer Nomina")

                idMov = 0
                for line in file:
                    ##input(line)
                    if (line[0:3] != ",,," and line.count(",") > 50 and line.split(',')[1] != "EstadoSAT"):

                        UUIDSAT = line.split(',')[5].strip().upper()  ##[:-1]
                        statusSAT = line.split(',')[1]
                        rfcEmisorSAT = ""
                        razonSocialEmisorSAT = ""
                        rfcReceptorSAT = line.split(',')[6]
                        razonSocialReceptorSAT = line.split(',')[7]
                        montoSAT = float(line.split(',')[20])
                        fechaSAT = line.split(',')[2]
                        facturaInterna = line.split(',')[3] + line.split(',')[4]
                        conceptoSAT = line.split(',')[24]
                        subtotalSAT = ""
                        ivaSAT = ""
                        NumCtaPagoSAT = ""
                        ##clave = poliza + "-" + datosPolizaFecha + "-" + str(monto)
                        clave = UUIDSAT
                        idMov = self.agregarSatDicc(clave, rfcEmisorSAT, razonSocialEmisorSAT, rfcReceptorSAT,razonSocialReceptorSAT, statusSAT, conceptoSAT, facturaInterna,subtotalSAT, ivaSAT, NumCtaPagoSAT, fechaSAT, montoSAT,idMov)
                    else:
                        if (line.count(",") > 3 and line[0:3] != ",,," and line.split(',')[1] != "EstadoSAT"):
                            self.diariosTodo[line] = {}
                            self.diariosTodo[line]["status"] = "renglon erroneo"

                file.close()

        except Exception as err:
            print(line)
            self.wriErr.addMensaje("info", "Renglon:" + line)
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)

        return

    ###Main
    def main(self):
        nameFunction = "main"

        try:

            ### Conciliacion DiariosSAT Icaav
            self.extractInfoDiarios()
            self.extractInfoSAT()
            self.extractInfoNomina()
            self.recorreResDiariosSATIcaav()
            ##print(self.i)

            print("Gracias por la espera, tus reportes estan listos." + self.agencia)

        except Exception as err:
            self.wriErr.addMensaje("error", "Error sistema: " + nameFunction + "-" + str(err))
            WriteLog.writeLog(nameFunction, err)
        return

##con = ConciliadorSAT("Contravel","./",[12],"17")
##con.main()
##con = ConciliadorSAT("VK","./",[1,2,3,4,5,6,7,8,9,10,11,12])
##con.main()
